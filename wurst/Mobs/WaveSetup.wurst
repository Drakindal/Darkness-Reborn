package WaveSetup

import calcLowerHigher
import WaveHeroSetup
import ClosureTimers
import MyUnitIds
import Orders
import ItemDrops
import codeDamageTypings

timer waveTimer = CreateTimer()
timerdialog waveTimerDialog = CreateTimerDialog(waveTimer)

timer gracePeriod = CreateTimer()
timerdialog gracePeriodDialog = CreateTimerDialog(gracePeriod)

integer count = 0
integer wave_count = 1 // originally 1

integer mini_lower = 0
integer mini_higher = 0

integer big_lower = 0
integer big_higher = 0

integer timercount1 = 1
integer timercount2 = wave_count

real facing = 270

unit array miniboss = []
unit bigboss = null

init
	LEFT_CREEP_1.enumerateMagicResistanceId(80)
	LEFT_CREEP_7.enumerateMagicResistanceId(80)
	LEFT_CREEP_13.enumerateMagicResistanceId(80)

	ELITE_CREEP_8.enumerateMagicResistanceId(40)

	WAVE_MOB[1]..enumeratePhysicalPenetrationId(0).enumeratePhysicalPenetrationId(0)
	WAVE_MOB[2]..enumeratePhysicalPenetrationId(10).enumeratePhysicalPenetrationId(50)
	WAVE_MOB[3]..enumeratePhysicalPenetrationId(30).enumeratePhysicalPenetrationId(0)
	WAVE_MOB[4]..enumeratePhysicalPenetrationId(0).enumeratePhysicalPenetrationId(20)

	WAVE_MOB[5]..enumeratePhysicalPenetrationId(15).enumeratePhysicalPenetrationId(40)
	WAVE_MOB[6]..enumeratePhysicalPenetrationId(0).enumeratePhysicalPenetrationId(80)
	WAVE_MOB[7]..enumeratePhysicalPenetrationId(25).enumeratePhysicalPenetrationId(40)
	WAVE_MOB[8]..enumeratePhysicalPenetrationId(10).enumeratePhysicalPenetrationId(0)

	WAVE_MOB[9]..enumeratePhysicalPenetrationId(10).enumeratePhysicalPenetrationId(0)
	WAVE_MOB[10]..enumeratePhysicalPenetrationId(0).enumeratePhysicalPenetrationId(0)
	WAVE_MOB[11]..enumeratePhysicalPenetrationId(40).enumeratePhysicalPenetrationId(10)
	WAVE_MOB[12]..enumeratePhysicalPenetrationId(0).enumeratePhysicalPenetrationId(0)

	WAVE_MOB[13]..enumeratePhysicalPenetrationId(1).enumeratePhysicalPenetrationId(40)
	WAVE_MOB[14]..enumeratePhysicalPenetrationId(10).enumeratePhysicalPenetrationId(20)
	WAVE_MOB[15]..enumeratePhysicalPenetrationId(15).enumeratePhysicalPenetrationId(15)
	WAVE_MOB[16]..enumeratePhysicalPenetrationId(9).enumeratePhysicalPenetrationId(0)

	WAVE_MOB[17]..enumeratePhysicalPenetrationId(40).enumeratePhysicalPenetrationId(0)
	WAVE_MOB[18]..enumeratePhysicalPenetrationId(0).enumeratePhysicalPenetrationId(20)
	WAVE_MOB[19]..enumeratePhysicalPenetrationId(0).enumeratePhysicalPenetrationId(60)
	WAVE_MOB[20]..enumeratePhysicalPenetrationId(0).enumeratePhysicalPenetrationId(0)

	for int x = 1 to 105
		WAVE_BOSS[x]..enumeratePhysicalPenetrationId(15).enumerateMagicResistanceId(15)

	WAVE_BOSS_39.enumerateMagicResistanceId(60)
	WAVE_BOSS_93.enumerateMagicResistanceId(80)
	WAVE_BOSS_56.enumerateMagicResistanceId(80)
	WAVE_BOSS_66.enumerateMagicResistanceId(80)
	WAVE_BOSS_68.enumerateMagicResistanceId(80)
	WAVE_BOSS_76.enumerateMagicResistanceId(80)

	WAVE_HERO_29.enumerateMagicResistanceId(80)

function continueUnitStats(integer uId) returns string
	return "|r\n|c00aa3101Physical Pen: " + (uId.getPhysPenetration() * 100).toString() + "%|r\n|c003228ffMagical Resistance: " + (uId.getMagicResist() * 100).toString() + "%|r\n"

function unitStats(unit u, int whichSide)
	let uId = u.getTypeId()
	switch whichSide
		case 1
			printTimed("Left Side Boss" + "\n|c00ffff00Unit: " + u.getName() + continueUnitStats(uId), 5)
		case 2
			printTimed("Middle Boss " + "\n|c00ffff00Unit: " + u.getName() + continueUnitStats(uId), 5)
		case 3
			printTimed("Right Side Boss " + "\n|c00ffff00Unit: " + u.getName() + continueUnitStats(uId), 5)
		case 4
			printTimed("Big Boss " + "\n|c00ffff00Unit: " + u.getName() + continueUnitStats(uId), 5)
		default
			printTimed("Wave: " + wave_count.toString() + "\n|c00ffff00Unit: " + u.getName() + continueUnitStats(uId), 5)

public function spawnWavesNow()
	if(count == 0)
		let temp = createUnit(WAVE_MOB[wave_count])
		unitStats(temp, 0)
		temp.remove()
	count = count + 1

	doPeriodicallyCounted(0.2, 12) (CallbackCounted cb) ->

		createUnit(Player(11), WAVE_MOB[wave_count], gg_rct_LeftSpawn.randomPoint(), facing.asAngleDegrees()).issuePointOrderById(Orders.attack, gg_rct_LeftSpawnMove1.randomPoint())
		
		createUnit(Player(12), WAVE_MOB[wave_count], gg_rct_MiddleSpawn.randomPoint(), facing.asAngleDegrees()).issuePointOrderById(Orders.attack, gg_rct_AllSpawnMove1.randomPoint())

		createUnit(Player(13), WAVE_MOB[wave_count], gg_rct_RightSpawn.randomPoint(), facing.asAngleDegrees()).issuePointOrderById(Orders.attack, gg_rct_RightSpawnMove1.randomPoint())

	if count == 3
		doAfter(2.5) -> 
			mini_lower = calc_miniBossLower(wave_count)
			mini_higher = calc_miniBossHigher(wave_count)
			count = 0
			wave_count = wave_count + 1
			if wave_count == 21
				waveTimer.destr()
				waveTimerDialog.destr()
			miniboss[1] = createUnit(Player(11), WAVE_BOSS[GetRandomInt(mini_lower, mini_higher)], gg_rct_LeftSpawn.getCenter(), facing.asAngleDegrees())
			miniboss[1].issuePointOrderById(Orders.attack, gg_rct_LeftSpawnMove1.randomPoint())
			unitStats(miniboss[1], 1)
			minibossDeath(miniboss[1])
			miniboss[2] = createUnit(Player(12), WAVE_BOSS[GetRandomInt(mini_lower, mini_higher)], gg_rct_MiddleSpawn.getCenter(), facing.asAngleDegrees())
			miniboss[2].issuePointOrderById(Orders.attack, gg_rct_AllSpawnMove1.randomPoint())
			unitStats(miniboss[2], 2)
			minibossDeath(miniboss[2])
			miniboss[3] = createUnit(Player(13), WAVE_BOSS[GetRandomInt(mini_lower, mini_higher)], gg_rct_RightSpawn.getCenter(), facing.asAngleDegrees())
			miniboss[3].issuePointOrderById(Orders.attack, gg_rct_RightSpawnMove1.randomPoint())
			unitStats(miniboss[3], 3)
			minibossDeath(miniboss[3])
			if (wave_count-1) % 5 == 0
				doAfter(2.5) -> 
					if wave_count == 21
						waveHeroSetup()
					big_lower = calc_lowerBigBoss((wave_count-1))
					big_higher = calc_higherBigBoss((wave_count-1))
					miniboss[4] = createUnit(Player(11), WAVE_BOSS[GetRandomInt(big_lower, big_higher)], gg_rct_MiddleSpawn.getCenter(), facing.asAngleDegrees())
					miniboss[4].issuePointOrderById(Orders.attack, gg_rct_AllSpawnMove1.randomPoint())
					minibossDeath(miniboss[4])

function minibossDeath(unit u)
	CreateTrigger()..registerUnitEvent(u, EVENT_UNIT_DEATH)..addAction() ->
		let u1 = GetDyingUnit()
		dropMyItemsMinibosses(u1)

function moveUnitsCond() returns boolean
	return GetOwningPlayer(GetEnteringUnit()) == Player(11) or GetOwningPlayer(GetEnteringUnit()) == Player(12) or GetOwningPlayer(GetEnteringUnit()) == Player(13)

function moveUnit()
	CreateTrigger()
	..registerRectEnterEventSource(gg_rct_LeftSpawnMove1)
	..registerRectEnterEventSource(gg_rct_RightSpawnMove1)
	..addCondition(Condition(function moveUnitsCond))
	..addAction() ->
		GetEnteringUnit().issuePointOrderById(Orders.attack, gg_rct_AllSpawnMove1.randomPoint())

function moveUnit2()
	CreateTrigger()
	..registerRectEnterEventSource(gg_rct_AllSpawnMove1)
	..addCondition(Condition(function moveUnitsCond))
	..addAction() ->
		GetEnteringUnit().issuePointOrderById(Orders.attack, gg_rct_AllSpawnMove2.randomPoint())

function waveSetupTimerElapsed()
	CreateTrigger()..registerTimerExpireEvent(waveTimer)..addAction() -> 
		timercount1 = timercount1 + 1
		waveTimerDialog.setTitle("Wave "+I2S(timercount2)+" — ("+I2S(timercount1)+"/3)")
		if timercount1 == 3
			timercount2 = timercount2 + 1
			timercount1 = 0

public function waveSetup()

	moveUnit()	
	moveUnit2()
	waveSetupTimerElapsed()

	gracePeriod.destr()
	gracePeriodDialog.destr()
	waveTimer.startPeriodic(30, function spawnWavesNow)
	waveTimerDialog.setTitle("Wave "+I2S(wave_count)+" — (1/3)")
	waveTimerDialog.setTimeColor(155, 155, 155, 0)
	waveTimerDialog.display(true)

public function preWaveSetup()
	gracePeriod.start(60, function waveSetup)
	gracePeriodDialog.setTitle("Preparation Phase")
	gracePeriodDialog.setTimeColor(155, 155, 155, 0)
	gracePeriodDialog.display(true)