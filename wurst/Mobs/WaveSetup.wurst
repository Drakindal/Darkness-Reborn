package WaveSetup

import calcLowerHigher
import WaveHeroSetup
import ClosureTimers
import MyUnitIds
import Orders
import ItemDrops
import DamageTarget
import MultiboardTimer
import LinkedList
import ClosureEvents
import DS_DataCompileTime
import DS_DataRunTime

var internalWaveCount = 0

let wavesList = new LinkedList<Waves>
let bossWaveList = new LinkedList<BossWaves>
let bigBossWaveList = new LinkedList<BossWaves>

init
	CREEP_LEFT_MUD_GOLEM.addUnitBaseRes(resType.Magical, 0.80)
	CREEP_LEFT_ROCK_GOLEM.addUnitBaseRes(resType.Magical, 0.80)
	CREEP_LEFT_GRANITE_GOLEM.addUnitBaseRes(resType.Magical, 0.80)

	CREEP_ELITE_FROSTY_THE_SNOWMAN.addUnitBaseRes(resType.Magical, 0.40)
	CREEP_ELITE_ICE_REVENANT..addUnitBaseRes(resType.Magical, 0.60)

	WAVE_MOB[1]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_MOB[2]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.50)
	WAVE_MOB[3]..addUnitBaseRes(resType.Magical, 0.30)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_MOB[4]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.20)

	WAVE_MOB[5]..addUnitBaseRes(resType.Magical, 0.15)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_MOB[6]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.80)
	WAVE_MOB[7]..addUnitBaseRes(resType.Magical, 0.25)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_MOB[8]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.00)

	WAVE_MOB[9]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_MOB[10]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_MOB[11]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_MOB[12]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.00)

	WAVE_MOB[13]..addUnitBaseRes(resType.Magical, 0.01)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_MOB[14]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_MOB[15]..addUnitBaseRes(resType.Magical, 0.15)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_MOB[16]..addUnitBaseRes(resType.Magical, 0.09)..addUnitBasePen(penType.Physical, 0.00)

	WAVE_MOB[17]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_MOB[18]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_MOB[19]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.60)
	WAVE_MOB[20]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.00)

	WAVE_BOSS[1]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[2]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_BOSS[3]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.05)
	WAVE_BOSS[4]..addUnitBaseRes(resType.Magical, 0.30)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[5]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.10)

	WAVE_BOSS[6]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[7]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[8]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_BOSS[9]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[10]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.15)

	WAVE_BOSS[11]..addUnitBaseRes(resType.Magical, 0.15)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_BOSS[12]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_BOSS[13]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[14]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[15]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.25)

	WAVE_BOSS[16]..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.05)
	WAVE_BOSS[17]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[18]..addUnitBaseRes(resType.Magical, 0.30)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_BOSS[19]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.50)
	WAVE_BOSS[20]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.20)

	WAVE_BOSS[21]..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[22]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[23]..addUnitBaseRes(resType.Magical, 0.15)..addUnitBasePen(penType.Physical, 0.25)
	WAVE_BOSS[24]..addUnitBaseRes(resType.Magical, 0.15)..addUnitBasePen(penType.Physical, 0.25)
	WAVE_BOSS[25]..addUnitBaseRes(resType.Magical, 0.90)..addUnitBasePen(penType.Physical, 0.10)

	WAVE_BOSS[26]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.30)
	WAVE_BOSS[27]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[28]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[29]..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[30]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.25)

	WAVE_BOSS[31]..addUnitBaseRes(resType.Magical, 0.90)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_BOSS[32]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[33]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_BOSS[34]..addUnitBaseRes(resType.Magical, 0.25)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[35]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.10)

	WAVE_BOSS[36]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[37]..addUnitBaseRes(resType.Magical, 0.30)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[38]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[39]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.60)
	WAVE_BOSS[40]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.20)

	WAVE_BOSS[41]..addUnitBaseRes(resType.Magical, 0.00)..addUnitBasePen(penType.Physical, 0.25)
	WAVE_BOSS[42]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[43]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[44]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[45]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.25)

	WAVE_BOSS[46]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.30)
	WAVE_BOSS[47]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[48]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[49]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_BOSS[50]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.20)

	WAVE_BOSS[51]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[52]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[53]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[54]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[55]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.25)

	WAVE_BOSS[56]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[57]..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[58]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.25)
	WAVE_BOSS[59]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_BOSS[60]..addUnitBaseRes(resType.Magical, 0.10)..addUnitBasePen(penType.Physical, 0.25)

	WAVE_BOSS[61]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[62]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[63]..addUnitBaseRes(resType.Magical, 0.15)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_BOSS[64]..addUnitBaseRes(resType.Magical, 0.35)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[65]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.10)

	WAVE_BOSS[66]..addUnitBaseRes(resType.Magical, 0.30)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[67]..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[68]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[69]..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.00)
	WAVE_BOSS[70]..addUnitBaseRes(resType.Magical, 0.35)..addUnitBasePen(penType.Physical, 0.15)

	WAVE_BOSS[71]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[72]..addUnitBaseRes(resType.Magical, 0.35)..addUnitBasePen(penType.Physical, 0.45)
	WAVE_BOSS[73]..addUnitBaseRes(resType.Magical, 0.25)..addUnitBasePen(penType.Physical, 0.25)
	WAVE_BOSS[74]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_BOSS[75]..addUnitBaseRes(resType.Magical, 0.25)..addUnitBasePen(penType.Physical, 0.15)

	WAVE_BOSS[76]..addUnitBaseRes(resType.Magical, 0.25)..addUnitBasePen(penType.Physical, 0.30)
	WAVE_BOSS[77]..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.25)
	WAVE_BOSS[78]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[79]..addUnitBaseRes(resType.Magical, 0.20)..addUnitBasePen(penType.Physical, 0.25)
	WAVE_BOSS[80]..addUnitBaseRes(resType.Magical, 0.45)..addUnitBasePen(penType.Physical, 0.15)

	WAVE_BOSS[81]..addUnitBaseRes(resType.Magical, 0.25)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_BOSS[82]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_BOSS[83]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[84]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.25)
	WAVE_BOSS[85]..addUnitBaseRes(resType.Magical, 0.35)..addUnitBasePen(penType.Physical, 0.15)

	WAVE_BOSS[86]..addUnitBaseRes(resType.Magical, 0.25)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[87]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.30)
	WAVE_BOSS[88]..addUnitBaseRes(resType.Magical, 0.65)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[89]..addUnitBaseRes(resType.Magical, 0.30)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[90]..addUnitBaseRes(resType.Magical, 0.30)..addUnitBasePen(penType.Physical, 0.10)

	WAVE_BOSS[91]..addUnitBaseRes(resType.Magical, 0.30)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_BOSS[92]..addUnitBaseRes(resType.Magical, 0.30)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[93]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_BOSS[94]..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[95]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.60)

	WAVE_BOSS[96]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_BOSS[97]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[98]..addUnitBaseRes(resType.Magical, 0.50)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_BOSS[99]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.60)
	WAVE_BOSS[100]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.40)
	
	WAVE_BOSS[101]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_BOSS[102]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.30)
	WAVE_BOSS[103]..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.50)
	WAVE_BOSS[104]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.30)
	WAVE_BOSS[105]..addUnitBaseRes(resType.Magical, 0.40)..addUnitBasePen(penType.Physical, 0.15)

	WAVE_HERO_0.addUnitBaseRes(resType.Magical, 0.60)
	WAVE_HERO_1.addUnitBaseRes(resType.Magical, 0.60)
	WAVE_HERO_2.addUnitBaseRes(resType.Magical, 0.60)
	WAVE_HERO_3.addUnitBaseRes(resType.Magical, 0.60)
	WAVE_HERO_4.addUnitBaseRes(resType.Magical, 0.60)
	WAVE_HERO_5.addUnitBaseRes(resType.Magical, 0.90)
	WAVE_HERO_6..addUnitBaseRes(resType.Magical, 0.70)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_HERO_7..addUnitBaseRes(resType.Magical, 0.60)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_HERO_8..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_HERO_9..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_HERO_10..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_HERO_11..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.30)
	WAVE_HERO_12..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_HERO_13..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.30)
	WAVE_HERO_14..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_HERO_15..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.10)
	WAVE_HERO_16..addUnitBaseRes(resType.Magical, 0.80)
	WAVE_HERO_17..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.20)
	WAVE_HERO_18..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_HERO_19..addUnitBaseRes(resType.Magical, 0.80)
	WAVE_HERO_20..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_HERO_21..addUnitBaseRes(resType.Magical, 0.80)
	WAVE_HERO_22..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_HERO_23..addUnitBaseRes(resType.Magical, 0.80)
	WAVE_HERO_24..addUnitBaseRes(resType.Magical, 0.80)
	WAVE_HERO_25..addUnitBaseRes(resType.Magical, 0.80)
	WAVE_HERO_26..addUnitBaseRes(resType.Magical, 0.90)..addUnitBasePen(penType.Physical, 0.15)
	WAVE_HERO_27..addUnitBaseRes(resType.Magical, 0.80)..addUnitBasePen(penType.Physical, 0.40)
	WAVE_HERO_28.addUnitBaseRes(resType.Magical, 0.99)
	WAVE_HERO_29.addUnitBaseRes(resType.Magical, 0.80)
	FINAL_BOSS..addUnitBaseRes(resType.Magical, 0.90)..addUnitBasePen(penType.Physical, 0.25)


class Waves
	int unitID
	
	construct(int unitID)
		this.unitID = unitID

class BossWaves
	int bossMin
	int bossMax

	construct(int bossMin, int bossMax)
		this.bossMin = bossMin
		this.bossMax = bossMax

function wavesSetup()
	for int i = 1 to 20
		wavesList.add(new Waves(WAVE_MOB[i]))
		bossWaveList.add(new BossWaves(calc_miniBossLower(i), calc_miniBossHigher(i)))
	for int i = 1 to 4
		bigBossWaveList.add(new BossWaves(calc_lowerBigBoss(i), calc_higherBigBoss(i)))
	


function continueUnitStats(integer uId) returns string
	return "|r\n|c00aa3101Physical Pen: " + (uId.getUnitBasePen(penType.Physical) * 100).toString() + "%|r\n|c003228ffMagical Resistance: " + (uId.getUnitBaseRes(resType.Magical) * 100).toString() + "%|r\n"

function unit.unitStats(int whichSide)
	let uId = this.getTypeId()
	switch whichSide
		case 1
			printTimed("Left Side Boss" + "\n|c00ffff00Unit: " + this.getName() + continueUnitStats(uId), 5)
		case 2
			printTimed("Middle Boss " + "\n|c00ffff00Unit: " + this.getName() + continueUnitStats(uId), 5)
		case 3
			printTimed("Right Side Boss " + "\n|c00ffff00Unit: " + this.getName() + continueUnitStats(uId), 5)
		case 4
			printTimed("|c00c90c0c!!!WARNING!!!|r\nBig Boss " + "\n|c00ffff00Unit: " + this.getName() + continueUnitStats(uId), 5)
		default
			printTimed("Wave: " + (21-wavesList.size()).toString() + "\n|c00ffff00Unit: " + this.getName() + continueUnitStats(uId), 5)

function spawnBigBoss()
	if bigBossWaveList.isEmpty()
		skip
	else
		titleString = "Big Boss Wave "+ bigBossWaveList.size().toString()
		graceWaveSpawnCb = doAfter(10) -> //2 seconds
			let big_lower = bigBossWaveList.get(0).bossMin
			let big_higher = bigBossWaveList.get(0).bossMax
			bigBossWaveList.removeAt(0)
			createUnit(Player(11), WAVE_BOSS[GetRandomInt(big_lower, big_higher)], gg_rct_MiddleSpawn.getCenter(), bj_UNIT_FACING.asAngleDegrees())
			..issuePointOrderById(Orders.attack, gg_rct_LeftSpawnMove1.randomPoint())
			..unitStats(4)
			..minibossDeath()
			if wavesList.isEmpty()
				waveHeroSetup()
			else
				titleString = "Wave "+(21-wavesList.size()).toString()+" — (1/3)"
				graceWaveSpawnCb = doAfter(90) ->
					internalWaveCount = 1
					spawnWavesNow()

function spawnBoss()
	if bossWaveList.isEmpty()
		skip
	else
		titleString = "Boss Wave "+(21-wavesList.size()+1).toString()
		graceWaveSpawnCb = doAfter(2) -> // 2 seconds
			let mini_lower = bossWaveList.get(0).bossMin
			let mini_higher = bossWaveList.get(0).bossMax
			bossWaveList.removeAt(0)
			createUnit(Player(11), WAVE_BOSS[GetRandomInt(mini_lower, mini_higher)], gg_rct_LeftSpawn.getCenter(), bj_UNIT_FACING.asAngleDegrees())
			..issuePointOrderById(Orders.attack, gg_rct_LeftSpawnMove1.randomPoint())
			..unitStats(1)
			..minibossDeath()

			createUnit(Player(12), WAVE_BOSS[GetRandomInt(mini_lower, mini_higher)], gg_rct_MiddleSpawn.getCenter(), bj_UNIT_FACING.asAngleDegrees())
			..issuePointOrderById(Orders.attack, gg_rct_LeftSpawnMove1.randomPoint())
			..unitStats(2)
			..minibossDeath()

			createUnit(Player(13), WAVE_BOSS[GetRandomInt(mini_lower, mini_higher)], gg_rct_RightSpawn.getCenter(), bj_UNIT_FACING.asAngleDegrees())
			..issuePointOrderById(Orders.attack, gg_rct_LeftSpawnMove1.randomPoint())
			..unitStats(3)
			..minibossDeath()
			if (20-wavesList.size()) % 5 == 0 and wavesList.size() != 20
				spawnBigBoss()
			else
				waveSetupTimerElapsed()
			

function spawnWave()
	createUnit(Player(11), wavesList.get(0).unitID, gg_rct_LeftSpawn.randomPoint(), bj_UNIT_FACING.asAngleDegrees()).issuePointOrderById(Orders.attack, gg_rct_LeftSpawnMove1.randomPoint())
		
	createUnit(Player(12), wavesList.get(0).unitID, gg_rct_MiddleSpawn.randomPoint(), bj_UNIT_FACING.asAngleDegrees()).issuePointOrderById(Orders.attack, gg_rct_AllSpawnMove1.randomPoint())

	createUnit(Player(13), wavesList.get(0).unitID, gg_rct_RightSpawn.randomPoint(), bj_UNIT_FACING.asAngleDegrees()).issuePointOrderById(Orders.attack, gg_rct_RightSpawnMove1.randomPoint())

function readWaveStats()
	createUnit(wavesList.get(0).unitID)..unitStats(0).remove()

function spawnWavesNow()
	if wavesList.isEmpty() == false
		if internalWaveCount == 1
			readWaveStats()

		doPeriodicallyCounted(0.02, 12) (CallbackCounted cb) ->
			spawnWave()

		if internalWaveCount == 3 and bossWaveList.isEmpty() == false
			spawnBoss()
			destroy wavesList.get(0)
			wavesList.removeAt(0)
		else
			waveSetupTimerElapsed()
		
function unit.minibossDeath()
	EventListener.add(this, EVENT_PLAYER_UNIT_DEATH) -> 
		dropMyItemsMinibosses(this)

function moveUnitsCond() returns boolean
	return GetOwningPlayer(GetEnteringUnit()) == Player(11) or GetOwningPlayer(GetEnteringUnit()) == Player(12) or GetOwningPlayer(GetEnteringUnit()) == Player(13)

function waveSetupTimerElapsed()
	if internalWaveCount == 3
		internalWaveCount = 1
		if wavesList.size() > 10
			graceWaveSpawnCb = doAfter(45) -> //50 seconds
				spawnWavesNow()
		else
			graceWaveSpawnCb = doAfter(50) -> //50 seconds
				spawnWavesNow()
	else 
		internalWaveCount = internalWaveCount + 1
		graceWaveSpawnCb = doAfter(30) -> //20 seconds
			spawnWavesNow()
	titleString = "Wave "+(21-wavesList.size()).toString()+" — ("+internalWaveCount.toString()+"/3)"

public function waveSetup()
	moveUnit()
	moveUnit2()
	waveSetupTimerElapsed()

function moveUnit()
	CreateTrigger()
	..registerRectEnterEventSource(gg_rct_LeftSpawnMove1)
	..registerRectEnterEventSource(gg_rct_RightSpawnMove1)
	..addCondition(Condition(function moveUnitsCond))
	..addAction() ->
		GetEnteringUnit().issuePointOrderById(Orders.attack, gg_rct_AllSpawnMove1.randomPoint())

function moveUnit2()
	CreateTrigger()
	..registerRectEnterEventSource(gg_rct_AllSpawnMove1)
	..addCondition(Condition(function moveUnitsCond))
	..addAction() ->
		GetEnteringUnit().issuePointOrderById(Orders.attack, gg_rct_AllSpawnMove2.randomPoint())

public function preWaveSetup()
	wavesSetup()
	titleString = "Preparation Phase "
	graceWaveSpawnCb = doAfter(120) -> //120 seconds
		waveSetup()

	CreateTrigger()..registerRectEnterEventSource(gg_rct_LeftSpawn)
	..addCondition(Condition(function moveUnitsCond))
	..addAction() ->
		GetEnteringUnit().issuePointOrderById(Orders.attack, gg_rct_LeftSpawnMove1.randomPoint())

	CreateTrigger()..registerRectEnterEventSource(gg_rct_RightSpawn)
	..addCondition(Condition(function moveUnitsCond))
	..addAction() ->
		GetEnteringUnit().issuePointOrderById(Orders.attack, gg_rct_RightSpawnMove1.randomPoint())

	CreateTrigger()..registerRectEnterEventSource(gg_rct_MiddleSpawn)
	..addCondition(Condition(function moveUnitsCond))
	..addAction() ->
		GetEnteringUnit().issuePointOrderById(Orders.attack, gg_rct_AllSpawnMove1.randomPoint())