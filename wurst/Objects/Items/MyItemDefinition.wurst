package MyItemDefinition

import CommonDescriptions
import ItemIds
import Recipes
import Object_Shops
import Object_ItemsNames
import ItemObjEditing
import LinkedList
import MyItemIds

// ----------------------------------------------------------------------------

class MyItemBaseDefinition extends ItemDefinition
    // The item's ID. Example: Scroll of Fusion.
    int itemId

    construct(int newId)
        super(newId, ItemIds.orbofDarkness)
        this.itemId = newId

        setActivelyUsed(false)
        setUseAutomaticallyWhenAcquired(false)
        setAbilities("")

        setGoldCost(0)
        setLumberCost(0)

        setStockMaximum(1)
        setStockReplenishInterval(0)
        setStockStartDelay(0)

        setPerishable(false)
        setNumberofCharges(0)

        setModelUsed("Objects\\InventoryItems\\TreasureChest\\treasurechest.mdl")

        setScalingValue(1)
        setTintingColor1Red(255)
        setTintingColor2Green(255)
        setTintingColor3Blue(255)

        setCanBeSoldByMerchants(true)
        setCanBeSoldToMerchants(true)

        setCanBeDropped(true)
        setDroppedWhenCarrierDies(false)

        setIgnoreCooldown(false)
        setIncludeAsRandomChoice(true)
        setValidTargetForTransformation(false)

        setPriority(1)
        setLevel(1)
        // So any 1 lvl hero can destroy item in creeps room.
        setHitPoints(10)

        setRequirements("")
        setRequirementsLevels("")
        setClassification("PowerUp")
        
        setHotkey(getHotKey(itemId))

// ----------------------------------------------------------------------------

public class MyItemDefinition extends MyItemBaseDefinition
    construct(int newId)
        super(newId)
        
    function describe(string effects)
        let itemName = getItemName(itemId)
        // The item name
        setName(itemName)
        // The chest item description
        setDescription(wordEffects + "\n" + effects)
        // The shop name
        setTooltipBasic("Purchase " + itemName)
        // The shop text
        setDescription(wordEffects + "\n" + effects)

// ----------------------------------------------------------------------------

class MyItemCombinationDefinition extends MyItemBaseDefinition
    // Link to list with recipes.
    RecipeList recipeList
    // List of components.
    LinkedList<int> components

    string effects
    
    construct(int newId, RecipeList recipeList)
        super(newId)

        this.components       = null
        this.recipeList       = recipeList

        this.effects          = "null"
        
    function describe(string effects)
        this.effects = effects

    ondestroy
        string materials = wordMaterials
        for comp in components
            materials = materials + getItemName(comp) + getShopNameForItem(comp) + "\n"

        // Generate effects ... 

        let itemName = getItemName(itemId)
        // The item name
        setName(itemName)
        // The chest item description
        setDescription(wordEffects + "\n" + effects)
        // The shop name
        setTooltipBasic("Purchase " + itemName)
        // The shop text
        setDescription(wordEffects + "\n" + effects)

    function addComponents(int item1)
        this.recipeList.addRecipe(item1, this.itemId)
        this.components = new LinkedList<int>()
        this.components.add(item1)

    function addComponents(int item1, int item2)
        this.recipeList.addRecipe(item1, item2, this.itemId)
        this.components = new LinkedList<int>()
        this.components.add(item1, item2)

    function addComponents(int item1, int item2, int item3)
        this.recipeList.addRecipe(item1, item2, item3, this.itemId)
        this.components = new LinkedList<int>()
        this.components.add(item1, item2, item3)

    function addComponents(int item1, int item2, int item3, int item4)
        this.recipeList.addRecipe(item1, item2, item3, item4, this.itemId)
        this.components = new LinkedList<int>()
        this.components.add(item1, item2, item3, item4)

    function addComponents(int item1, int item2, int item3, int item4, int item5)
        this.recipeList.addRecipe(item1, item2, item3, item4, item5, this.itemId)
        this.components = new LinkedList<int>()
        this.components.add(item1, item2, item3, item4, item5)

    function addComponents(int item1, int item2, int item3, int item4, int item5, int item6)
        this.recipeList.addRecipe(item1, item2, item3, item4, item5, item6, this.itemId)
        this.components = new LinkedList<int>()
        this.components.add(item1, item2, item3, item4, item5, item6)

// ----------------------------------------------------------------------------

// public class MyRecipeItemDefinition extends MyItemCombinationDefinition
//     // The item's ID. Example: Scroll of Fusion.
//     int itemId

//     // ID of the recipe-item for this item. Example: Recipe Scroll of Fusion.
//     // If there is no recipeItem, then 'recipeItemId' == -1. Example: Angel Mace.
//     int recipeItemId
//     // Link to list with recipes.
//     RecipeList recipeList
//     // List of components. If 'recipeItemId' != -1, then 'recipeItemId' must be included in 'components'.
//     LinkedList<int> components

//     string effects
    
//     int recipeGoldCost
//     int recipeLumberCost

//     construct(int newId, RecipeList recipeList)
//         super(newId)
//         this.itemId           = newId

//         this.recipeItemId     = -1
//         this.components       = null
//         this.recipeList       = recipeList

//         this.effects          = "null"

//         this.recipeGoldCost   = 0
//         this.recipeLumberCost = 0
        
//     function describe(string effects)
//         this.effects = effects

//     function addRecipeItemId(int recipeItemId)
//         this.recipeItemId = recipeItemId

//     override function setGoldCost(int itemGoldCost)
//         super.setGoldCost(itemGoldCost)

//     override function setLumberCost(int itemLumberCost)
//         super.setLumberCost(itemLumberCost)

//     function setGoldCost(int itemGoldCost, int recipeGoldCost)
//         super.setGoldCost(itemGoldCost)
//         this.recipeGoldCost = recipeGoldCost
        
//     function setLumberCost(int itemLumberCost, int recipeLumberCost)
//         super.setLumberCost(itemLumberCost)
//         this.recipeLumberCost = recipeLumberCost

//     ondestroy
//         if (recipeItemId != -1)
//             // Create definition for item's recipe.
                    
//             new MyItemDefinition(ITEM_SCROLL_OF_FUSION)
//             ..setGoldCost(0)
//             ..setLevel(3)
//             ..setPerishable(true)
//             ..setPriority(0)
//             ..setStockMaximum(2)
//             ..setStockReplenishInterval(120)
//             ..setDescription("Scroll")
//             ..setName("Scroll of Fusion")
//             ..setTooltipBasic("Mua Scroll of Fusion")
//             ..setTooltipExtended("|c00FFFC01Effect:|r  \n+12 All Stats\n+300 HP\n+10 Armor\n+5 HP/s")
//             ..setHotkey("D")

//             let recipeItem = new MyItemDefinition(recipeItemId)
//             ..setInterfaceIcon("ReplaceableTextures\\CommandButtons\\BTNSnazzyScrollPurple.blp")    
//             ..setClassification("Charged")
//             ..setGoldCost(recipeGoldCost)
//             ..setLumberCost(recipeLumberCost)
//             ..setStockReplenishInterval(3)
//             ..setStockStartDelay(3)
//             ..describeRecipeItem(
//             +"+12 All Stats\n"
//             +"+300 HP\n"
//             +"+10 Armor\n"
//             +"+5 HP/s\n")
            

//     +"|c00FEBA0EMaterials required to craft this item: :|r\n"
//     +"Circlet of Nobility (|c007EBFF1" +  shopNameBasicItems2 + "|r)\n"
//     +"Ring of Regeneration (|c007EBFF1" +  shopNameBasicItems2 + "|r)\n"
//     +"Ring of Protection (|c007EBFF1" +  shopNameBasicItems2 + "|r)")
//     ..setHotkey("")

//         // Generate effects ... 

//         let itemName = getItemName(itemId)
//         // The item name
//         setName(itemName)
//         // The chest item description
//         setDescription(wordEffects + "\n" + effects)
//         // The shop name
//         setTooltipBasic("Purchase " + itemName)
//         // The shop text
//         setDescription(wordEffects + "\n" + effects)

//     function addComponents(int item1)
//         this.recipeList.addRecipe(item1, this.itemId)
//         this.components = new LinkedList<int>()
//         this.components.add(item1)

//     function addComponents(int item1, int item2)
//         this.recipeList.addRecipe(item1, item2, this.itemId)
//         this.components = new LinkedList<int>()
//         this.components.add(item1, item2)

//     function addComponents(int item1, int item2, int item3)
//         this.recipeList.addRecipe(item1, item2, item3, this.itemId)
//         this.components = new LinkedList<int>()
//         this.components.add(item1, item2, item3)

//     function addComponents(int item1, int item2, int item3, int item4)
//         this.recipeList.addRecipe(item1, item2, item3, item4, this.itemId)
//         this.components = new LinkedList<int>()
//         this.components.add(item1, item2, item3, item4)

//     function addComponents(int item1, int item2, int item3, int item4, int item5)
//         this.recipeList.addRecipe(item1, item2, item3, item4, item5, this.itemId)
//         this.components = new LinkedList<int>()
//         this.components.add(item1, item2, item3, item4, item5)

//     function addComponents(int item1, int item2, int item3, int item4, int item5, int item6)
//         this.recipeList.addRecipe(item1, item2, item3, item4, item5, item6, this.itemId)
//         this.components = new LinkedList<int>()
//         this.components.add(item1, item2, item3, item4, item5, item6)

// ----------------------------------------------------------------------------

public class MyCreepTpDefinition extends MyItemBaseDefinition

    construct(int newId)
        super(newId)


