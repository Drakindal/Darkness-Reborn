package OrbEffectsStats

import ObjectIdGenerator
import AbilityObjEditing
import CommonDescriptions
import codeDamageTypings
import ObjectIds
import Format
import ItemStatsDef

// ----------------------------------------------------------------------------

public function addLifeSteal(real value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = realToString(100 * value, 0) + "% " + wordLifeSteal

    new AbilityDefinitionVampiricattack(abilityId)
    ..setLifeStolenPerAttack(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addArmorOnHit(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordArmorOnHit

    new AbilityDefinitionOrbofCorruption(abilityId)
    ..setArmorPenalty(1, -value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addArmorPen(real value) returns ItemStats
    let effects = realToString(value, 0) + " " + wordArmorOnHit
    
    return new ItemStatsCustomFunc(effects, 
    (itemId, itemDef) -> itemId.putInPhysPenItemHash(value))

// ----------------------------------------------------------------------------

public function addMpOnHit(real percentOfMaxMp) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = wordMpOnHit.format((100*percentOfMaxMp).toString(0))

    new AbilityDefinitionSiphonManaCreep(abilityId)
    ..setManaTransferredPerSecond(1, percentOfMaxMp)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addFrost(real durationNormal, real durationHero) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()

    string effects
    if (durationHero == durationHero)
        effects = wordFrost2.format(durationNormal.toString(1), durationHero.toString(1))
    else
        effects = wordFrost1.format(durationHero.toString(1))

    new AbilityDefinitionFrostDamageBonus(abilityId)
    ..setDurationHero(1, durationHero)
    ..setDurationNormal(1, durationNormal)
    
    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addChainLighting(real chance, real damage, real damageReductionPerTarget, int numberOfTargets) returns ItemStats
    let abilityId1 = ABIL_ID_GEN.next()
    let abilityId2 = ABIL_ID_GEN.next()

    let effects = wordLightning.format((100*chance).toString(), damage.toString(), numberOfTargets.toString(), damageReductionPerTarget.toString())

    new AbilityDefinitionFarseerChainLightning(abilityId1)
    ..setDamageperTarget(1, damage)
    ..setNumberofTargetsHit(1, numberOfTargets)
    ..setDamageReductionperTarget(1, damageReductionPerTarget)
    
    new AbilityDefinitionOrbofLightning(abilityId2)
    ..setChanceToHitUnits(1, chance)
    ..setChanceToHitSummons(1, chance)
    ..setChanceToHitHeros(1, chance)
    ..setEffectAbility(1, abilityId1.toRawCode())
    
    return new ItemStats(abilityId2, effects)