package ItemStats

import ObjectIdGenerator
import AbilityObjEditing
import CommonDescriptions
import codeDamageTypings

// ----------------------------------------------------------------------------

function intToString(int value) returns string
    if (value > 0)
        return "+" + value.toString()
    else
        return value.toString()

function realToString(real value, int precision) returns string
    if (value > 0)
        return "+" + value.toString(precision)
    else
        return value.toString(precision)

// ----------------------------------------------------------------------------

public class ItemStats
    int abilityId
    string effects

    construct(int abilityId, string effects)
        this.abilityId = abilityId
        this.effects   = effects

    function addCustomStats(int _itemId)

    function addToAbilityList() returns boolean
        return true

// ----------------------------------------------------------------------------

public interface InitItemsStatsFunc
    function call(int itemId)

public class ItemStatsCustomFunc extends ItemStats
    InitItemsStatsFunc initFunc

    construct(string effects, InitItemsStatsFunc initFunc)
        super(0, effects)
        this.initFunc = initFunc


    override function addCustomStats(int itemId)
        initFunc.call(itemId)

    override function addToAbilityList() returns boolean
        return false

// ----------------------------------------------------------------------------

public function addCustomStats(int abilityId, string effects) returns ItemStats
    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addAttackSpeed(real value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = realToString(100 * value, 0) + "% " + wordAttackSpeed

    new AbilityDefinitionAttackSpeedIncrease(abilityId)
    ..setAttackSpeedIncrease(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addDamage(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordDamage

    new AbilityDefinitionAttackBonus(abilityId)
    ..setAttackBonus(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addLifeSteal(real value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = realToString(100 * value, 0) + "% " + wordLifeSteal

    new AbilityDefinitionVampiricattack(abilityId)
    ..setLifeStolenPerAttack(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addArmorOnHit(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordArmorOnHit

    new AbilityDefinitionOrbofCorruption(abilityId)
    ..setArmorPenalty(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addArmorPen(real value) returns ItemStats
    let effects = realToString(value, 0) + " " + wordArmorOnHit
    
    return new ItemStatsCustomFunc(effects, 
    (itemId) -> itemId.putInPhysPenItemHash(value))

// ----------------------------------------------------------------------------

public function addCleave(real factor, real range) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = wordCleave.format(factor.toString(1), range.toString(0))

    new AbilityDefinitionPitLordCleavingAttack(abilityId)
    ..setDistributedDamageFactor(1, factor)
    ..setCastRange(1, range)
    
    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addCrit(real factor, real chance) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = wordCrit.format((100*chance).toString(0), factor.toString(1))

    new AbilityDefinitionCriticalStrikecreep(abilityId)
    ..setDamageMultiplier(1, factor)
    ..setChancetoCriticalStrike(1, chance)
    
    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

public function addHP(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordHP

    new AbilityDefinitionMaxLifeBonusGreater(abilityId)
    ..setMaxLifeGained(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addHPReg(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordHPReg

    new AbilityDefinitionRegenLife(abilityId)
    ..setHitPointsRegeneratedPerSecond(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addArmor(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordArmor

    new AbilityDefinitionDefenseBonusPlus1(abilityId)
    ..setDefenseBonus(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addDamageBlock(real chance, real ignoreValue) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = wordDamageBlock.format(chance.toString(1), ignoreValue.toString(0))

    new AbilityDefinitionHardenedSkin(abilityId)
    ..setLevels(1)
    ..setChancetoReduceDamage(1, chance)
    ..setMinimumDamage(1, 0)
    ..setIgnoredDamage(1, ignoreValue)
    ..setIncludeMeleeDamage(1, true)
    ..setIncludeRangedDamage(1, true)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addEvasion(real chance) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = (chance * 100).toString(0) + "% " + wordEvasion

    new AbilityDefinitionEvasion(abilityId)
    ..setChancetoEvade(1, chance)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addMovementSpeed(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordMovementSpeed

    new AbilityDefinitionMoveSpeedBonus(abilityId)
    ..setMovementSpeedBonus(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addMP(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordMP

    new AbilityDefinitionMaxManaBonusMost(abilityId)
    ..setMaxManaGained(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addMPReg(real value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = realToString(100 * value, 0) + "% " + wordMPReg

    new AbilityDefinitionItemRegenMana(abilityId)
    ..setManaRegenerationBonusasfractionofnormal(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

public function addAgi(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordAgi

    new AbilityDefinitionAllPlus1(abilityId)
    ..setAgilityBonus(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addStr(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordStr

    new AbilityDefinitionAllPlus1(abilityId)
    ..setStrengthBonus(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addInt(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordInt

    new AbilityDefinitionAllPlus1(abilityId)
    ..setIntelligenceBonus(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------

public function addAllStats(int value) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = intToString(value) + " " + wordAllStats

    new AbilityDefinitionAllPlus1(abilityId)
    ..setAgilityBonus(1, value)
    ..setStrengthBonus(1, value)
    ..setIntelligenceBonus(1, value)

    return new ItemStats(abilityId, effects)

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------