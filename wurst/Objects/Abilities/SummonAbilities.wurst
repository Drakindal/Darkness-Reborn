package SummonAbilities

import AbilityObjEditing
import AbilitiesList
import ItemStatsDef
import ObjectIds
import ObjectIdGenerator
import CommonDescriptions
import codeDamageTypings
import Abilities
import ClosureForGroups

// ----------------------------------------------------------------------------

public function addAbilitySummonInfernoUnit(real aoeDamage, real area, int unitId, string unitName, real unitDuration, int manaCost, real cd) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = wordAbilitySummonInferno.format(aoeDamage.toString(), area.toString(), unitName, unitDuration.toString(), cd.toString())

    new AbilityDefinitionInferno(abilityId)
    ..setLevels(1)
    ..setDamage(1, aoeDamage)
    ..setDuration(1, unitDuration)
    ..setSummonedUnit(1, unitId.toRawCode())
    ..setAreaofEffect(1, area)
    ..setHeroAbility(false)
    ..setItemAbility(true)
    ..setManaCost(1, manaCost)
    ..setTargetsAllowed(1, commaList(TargetsAllowed.air, TargetsAllowed.ground, TargetsAllowed.structure, TargetsAllowed.debris, TargetsAllowed.enemies))

    return new ItemStatsCustomFunc(abilityId, effects,
    (itemId, itemDef) -> itemDef.setCooldownGroup(abilityId.toRawCode())
    )

// ----------------------------------------------------------------------------

public function addAbilitySummonPermanentUnit(int unitId, string unitName, int manaCost, real cd) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = wordAbilitySummonInferno.format(unitName, cd.toString())

    new AbilityDefinitionBeastMasterSummonBear(abilityId)
    ..setLevels(1)
    ..setSummonedUnitCount(1, 2)
    ..setSummonedUnitType(1, unitId.toRawCode())
    ..setDurationHero(1, 0)
    ..setDurationNormal(1, 0)
    ..setManaCost(1, manaCost)
    ..setTargetsAllowed(1, commaList(TargetsAllowed.air, TargetsAllowed.ground, TargetsAllowed.structure, TargetsAllowed.debris, TargetsAllowed.enemies))

    return new ItemStatsCustomFunc(abilityId, effects,
    (itemId, itemDef) -> itemDef.setCooldownGroup(abilityId.toRawCode())
    )

// ----------------------------------------------------------------------------

public function addAbilityIllusions(int numberIllusions, real damageDealt, real damageReceived, int manaCost, real duration, real cd) returns ItemStats
    let abilityId = ABIL_ID_GEN.next()
    let effects = wordAbilityIllusions.format(numberIllusions.toString(), damageDealt.toString(), damageReceived.toString(), duration.toString(), cd.toString())

    new AbilityDefinitionBladeMasterMirrorImage(abilityId)
    ..setDamageDealt(1, damageReceived)
    ..setDamageTaken(1, damageDealt)
    ..setDurationHero(1, duration)
    ..setDurationNormal(1, duration)
    ..setNumberofImages(1, numberIllusions)
    ..setCooldown(1, cd)
    ..setManaCost(1, manaCost)

    return new ItemStatsCustomFunc(abilityId, effects,
    (itemId, itemDef) -> itemDef.setCooldownGroup(abilityId.toRawCode())
    )

// ----------------------------------------------------------------------------