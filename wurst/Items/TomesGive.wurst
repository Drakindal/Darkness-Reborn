package TomesGive
import ClosureEvents
import MyItemIds
import LinkedList
import Player
import ClosureTimers
import HashMap
import Global_Variables
import PlayerCommands

let tomes = new LinkedList<int>()
let tomeHash = new HashMap<int, tomeStats>()
let tomeAmount = new HashMap<int, int>()
let playerTomeChoice = new HashMap<player, tomeChoice>()
let playerSelfishTome = new HashMap<player, bool>()
let playerChoiceTimer = new HashMap<player, CallbackCounted>()

enum tomeStats
    Agility
    Strength
    Intelligence
    All

enum tomeChoice
    None
    Other
    Selfish

init
    tomeSold()
    ITEM_TOME_OF_FROSTY_AGILITY.tomeEnumerate(2999, tomeStats.Agility)
    ITEM_TOME_OF_FROSTY_STRENGTH.tomeEnumerate(2999, tomeStats.Strength)
    ITEM_TOME_OF_FROSTY_INTELLIGENCE.tomeEnumerate(2999, tomeStats.Intelligence)
    ITEM_TOME_OF_FROSTY_ALL_STATS.tomeEnumerate(1999, tomeStats.All)
    for i = 0 to 9
        playerSelfishTome.put(players[i], false)

public function int.tomeEnumerate(int amount, tomeStats statType)
    tomes.add(this)
    tomeHash.put(this, statType)
    tomeAmount.put(this, amount)

function unit.AddStats(tomeStats tomeStat, int amount)
    switch tomeStat
        case tomeStats.Agility
            this.addAgi(amount)
        case tomeStats.Strength
            this.addStr(amount)
        case tomeStats.Intelligence
            this.addInt(amount)
        case tomeStats.All
            this.addInt(amount)
            this.addStr(amount)
            this.addAgi(amount)

function changeSelfishState()
    EventListener.add(EVENT_PLAYER_CHAT_FILTER) -> 
        if EventData.getChatMessage().substring(0, 7).toLowerCase() == "-Selfish"
            playerSelfishTome.put(EventData.getTriggerPlayer(), true)
    EventListener.add(EVENT_PLAYER_CHAT_FILTER) ->
        let eventString = EventData.getChatMessage()
        if eventString.substring(0, 4).toLowerCase() == "-give"
            getPlayerFromPartialNameColorOrId(eventString.substring(5, eventString.length()), EventData.getTriggerPlayer())

        

function tomeSold()
    EventListener.add(EVENT_UNIT_SELL_ITEM) ->
        let p = EventData.getBuyingUnit().getOwner()
        let soldItem = EventData.getSoldItem()
        let soldItemID = soldItem.getTypeId()
        if tomes.has(soldItemID)
            soldItem.remove()
            if playerSelfishTome.get(p) == true
                playerHero.get(p).AddStats(tomeHash.get(soldItemID), tomeAmount.get(soldItemID))
            else
                doPeriodicallyCounted(1, 10) (CallbackCounted cb) ->
                    if cb.isLast() or playerTomeChoice.get(p) == tomeChoice.Selfish
                        playerHero.get(p).AddStats(tomeHash.get(soldItemID), tomeAmount.get(soldItemID))
                    else
