package ItemDrops
import MyUnitIds
import MyItemIds
import HashList
import HashMap
import ClosureTimers
import UpdateDropSite
import ItemPickups
import LinkedList

let dropListHash = new HashMap<int,DropList>
let dropItemsToStore = new LinkedList<item>

let guaranteedSingleDrophash = new HashMap<int, ItemTable>
let chanceSingleDropHash = new HashMap<int, ChanceItemTable>
let guaranteedMultiDropHash = new HashMap<int, MultipleDropTable>
let multiChanceMultiDropHash = new HashMap<int, MultiChanceMultiDropTable>
let singleChanceMultiDropHash = new HashMap<int, SingleChanceMultiDropTable>


init
    dropListEnumerate()

function rightCreepEnumerate()
    // Nerubian Queen
    let nerubianTable = new ChanceItemTable(25)
    nerubianTable.populateTable(ITEM_329, ITEM_330, ITEM_327)
    chanceSingleDropHash.put(ELITE_CREEP[1], nerubianTable)
    // Hydralisk
    let hydraTable = new MultiChanceMultiDropTable()
    hydraTable.populateLatestTable(25, ITEM_332, ITEM_330, ITEM_327, ITEM_331)
    hydraTable.populateLatestTable(10, ITEM_341)
    // furbolg ursa warrior
    let furbolgWarriorTable = new SingleChanceMultiDropTable(25)
    furbolgWarriorTable.populateLatestTable(ITEM_334, ITEM_336, ITEM_335, ITEM_337)
    furbolgWarriorTable.populateLatestTable(ITEM_331, ITEM_332, ITEM_333)
    furbolgWarriorTable.populateLatestTable(ITEM_328)
    singleChanceMultiDropHash.put(ELITE_CREEP[3], furbolgWarriorTable)
    // Flesh golem
    let fleshGolemTable = new SingleChanceMultiDropTable(25)
    fleshGolemTable.populateLatestTable(ITEM_334, ITEM_336, ITEM_335, ITEM_337)
    fleshGolemTable.populateLatestTable(ITEM_331, ITEM_332, ITEM_333, ITEM_330, ITEM_329, ITEM_327)
    fleshGolemTable.populateLatestTable(ITEM_328)
    singleChanceMultiDropHash.put(ELITE_CREEP[4], fleshGolemTable)
    // Doom guard
    let doomGuardTable = new SingleChanceMultiDropTable(25)
    doomGuardTable.populateLatestTable(ITEM_334, ITEM_336, ITEM_335, ITEM_337)
    doomGuardTable.populateLatestTable(ITEM_338, ITEM_340, ITEM_339)
    doomGuardTable.populateLatestTable(ITEM_328)
    singleChanceMultiDropHash.put(ELITE_CREEP[5], doomGuardTable)
    // Frosty
    let frostyTable = new MultipleDropTable()
    frostyTable.populateLatestTable(ITEM_328)
    frostyTable.populateLatestTable(ITEM_328)
    frostyTable.populateLatestTable(ITEM_328)
    frostyTable.populateLatestTable(ITEM_352)
    guaranteedMultiDropHash.put(ELITE_CREEP[8], frostyTable)
    // Snappy
    let snapTable = new MultipleDropTable()
    snapTable.populateLatestTable(ITEM_328)
    snapTable.populateLatestTable(ITEM_328)
    snapTable.populateLatestTable(ITEM_276)
    snapTable.populateLatestTable(ITEM_355)
    guaranteedMultiDropHash.put(ELITE_CREEP[9], snapTable)
    // IceRev
    let iceRevTable = new MultipleDropTable()
    iceRevTable.populateLatestTable(ITEM_349, ITEM_350, ITEM_351)
    iceRevTable.populateLatestTable(ITEM_343, ITEM_344, ITEM_345)
    guaranteedMultiDropHash.put(ELITE_CREEP[10], iceRevTable)
    

function leftCreepEnumerate1()
    // Spider
    let spiderTable = new ChanceItemTable(20)
    spiderTable.populateTable(ITEM_277, ITEM_278, ITEM_279)
    chanceSingleDropHash.put(LEFT_CREEP[1], spiderTable)
    // Mud Golem
    let mudTable = new ChanceItemTable(20)
    mudTable.populateTable(ITEM_281, ITEM_280, ITEM_282)
    chanceSingleDropHash.put(LEFT_CREEP[2], mudTable)
    // Tiderunner
    let tiderunnerTable = new ChanceItemTable(20)
    tiderunnerTable.populateTable(ITEM_278, ITEM_279, ITEM_281, ITEM_282, ITEM_283, ITEM_285)
    chanceSingleDropHash.put(LEFT_CREEP[3], tiderunnerTable)
    // Wolf
    let wolfTable = new ChanceItemTable(20)
    wolfTable.populateTable(ITEM_283, ITEM_284, ITEM_285)
    chanceSingleDropHash.put(LEFT_CREEP[4], wolfTable)
    // Crab
    let crabTable = new ChanceItemTable(20)
    crabTable.populateTable(ITEM_288, ITEM_287, ITEM_286)
    chanceSingleDropHash.put(LEFT_CREEP[5], crabTable)
    // Trickster
    let tricksterTable = new ChanceItemTable(20)
    tricksterTable.populateTable(ITEM_289, ITEM_290, ITEM_291)
    chanceSingleDropHash.put(LEFT_CREEP[6], tricksterTable)
    // Spitting
    let spitTable = new ChanceItemTable(20)
    spitTable.populateTable(ITEM_292, ITEM_293, ITEM_294)
    chanceSingleDropHash.put(LEFT_CREEP[7], spitTable)
    // Rock golem
    let rockTable = new ChanceItemTable(20)
    rockTable.populateTable(ITEM_295, ITEM_296, ITEM_297)
    chanceSingleDropHash.put(LEFT_CREEP[8], rockTable)

function leftCreepEnumerate2()
    // Murgul
    let murgulTable = new ChanceItemTable(20)
    murgulTable.populateTable(ITEM_298, ITEM_299)
    chanceSingleDropHash.put(LEFT_CREEP[9], murgulTable)
    // Furbolg
    let furbolgTable = new ChanceItemTable(20)
    furbolgTable.populateTable(ITEM_300, ITEM_301)
    chanceSingleDropHash.put(LEFT_CREEP[10], furbolgTable)
    // Ghost
    let ghostTable = new ChanceItemTable(20)
    ghostTable.populateTable(ITEM_302, ITEM_303)
    chanceSingleDropHash.put(LEFT_CREEP[11], ghostTable)
    // Deathbringer
    let deathbringerTable = new ChanceItemTable(20)
    deathbringerTable.populateTable(ITEM_304, ITEM_305)
    chanceSingleDropHash.put(LEFT_CREEP[12], deathbringerTable)
    // Broodmother
    let broodmotherTable = new ChanceItemTable(20)
    broodmotherTable.populateTable(ITEM_306, ITEM_307)
    chanceSingleDropHash.put(LEFT_CREEP[13], broodmotherTable)
    // Granite Golem
    let graniteTable = new ChanceItemTable(20)
    graniteTable.populateTable(ITEM_308, ITEM_309)
    chanceSingleDropHash.put(LEFT_CREEP[14], graniteTable)
    // Turtle
    let turtleTable = new ChanceItemTable(20)
    turtleTable.populateTable(ITEM_310, ITEM_311)
    chanceSingleDropHash.put(LEFT_CREEP[15], turtleTable)

function leftCreepEnumerate3()
    // Polar Bear
    let polarTable = new ChanceItemTable(20)
    polarTable.populateTable(ITEM_312, ITEM_313)
    chanceSingleDropHash.put(LEFT_CREEP[16], polarTable)
    // Storm Wyrm
    let stormWyrmTable = new ChanceItemTable(20)
    stormWyrmTable.populateTable(ITEM_314, ITEM_315)
    chanceSingleDropHash.put(LEFT_CREEP[17], stormWyrmTable)
    // Skeleton
    let skeletonTable = new ChanceItemTable(20)
    skeletonTable.populateTable(ITEM_316, ITEM_317)
    chanceSingleDropHash.put(LEFT_CREEP[18], skeletonTable)
    // Troll
    let trollTable = new ChanceItemTable(20)
    trollTable.populateTable(ITEM_318, ITEM_319)
    chanceSingleDropHash.put(LEFT_CREEP[19], trollTable)
    // Mammoth
    let mammothTable = new ChanceItemTable(20)
    mammothTable.populateTable(ITEM_320, ITEM_321)
    chanceSingleDropHash.put(LEFT_CREEP[20], mammothTable)
    // Ravager
    let ravagerTable = new ChanceItemTable(20)
    ravagerTable.populateTable(ITEM_322, ITEM_323)
    chanceSingleDropHash.put(LEFT_CREEP[21], ravagerTable)
    // Slime
    let slimeTable = new ChanceItemTable(20)
    slimeTable.populateTable(ITEM_324, ITEM_325)
    chanceSingleDropHash.put(LEFT_CREEP[22], slimeTable)
    // Tormentor
    let tormentorTable = new ChanceItemTable(20)
    tormentorTable.populateTable(ITEM_326, ITEM_195)
    chanceSingleDropHash.put(LEFT_CREEP[23], tormentorTable)
    // Voidwalker
    let voidwalkerTable = new ChanceItemTable(20)
    voidwalkerTable.populateTable(ITEM_327, ITEM_328)
    chanceSingleDropHash.put(LEFT_CREEP[24], voidwalkerTable)
    

function dragonBossCreepEnumerate()
    // Dragon I
    let dragonOneTable = new MultipleDropTable()
    dragonOneTable..populateLatestTable(ITEM_356,ITEM_357)
    ..populateLatestTable(ITEM_356,ITEM_357)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,'tdex','tstr','tint','tdx2','tin2','tst2','tpow')
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,'tdex','tstr','tint','tdx2','tin2','tst2','tpow')
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,'tdex','tstr','tint','tdx2','tin2','tst2','tpow')
    guaranteedMultiDropHash.put(BOSS_CREEP[1], dragonOneTable)
    // Dragon II
    let dragonTwoTable = new MultipleDropTable()
    dragonTwoTable..populateLatestTable(ITEM_357,ITEM_358)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,'tdex','tstr','tint','tdx2','tin2','tst2','tpow')
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,'tdex','tstr','tint','tdx2','tin2','tst2','tpow')
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,'tdex','tstr','tint','tdx2','tin2','tst2','tpow')
    guaranteedMultiDropHash.put(BOSS_CREEP[2], dragonTwoTable)
    // Dragon III
    let dragonThreeTable = new MultipleDropTable()
    dragonThreeTable..populateLatestTable(ITEM_357,ITEM_358)
    ..populateLatestTable(ITEM_359,ITEM_358)
    ..populateLatestTable('tdx2','tin2','tst2',ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable('tdx2','tin2','tst2',ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable('tdx2','tin2','tst2',ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    guaranteedMultiDropHash.put(BOSS_CREEP[3], dragonThreeTable)
    // Dragon IV
    let dragonFourTable = new MultipleDropTable()
    dragonFourTable..populateLatestTable(ITEM_359,ITEM_358)
    ..populateLatestTable(ITEM_359,ITEM_358)
    ..populateLatestTable('tdx2','tin2','tst2',ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable('tdx2','tin2','tst2',ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable('tdx2','tin2','tst2',ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    guaranteedMultiDropHash.put(BOSS_CREEP[4], dragonFourTable)
    // Dragon V
    let dragonFiveTable = new MultipleDropTable()
    dragonFiveTable..populateLatestTable(ITEM_359,ITEM_358)
    ..populateLatestTable(ITEM_359,ITEM_358)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    guaranteedMultiDropHash.put(BOSS_CREEP[5], dragonFiveTable)
    // Dragon VI
    let dragonSixTable = new MultipleDropTable()
    dragonSixTable..populateLatestTable(ITEM_359,ITEM_358,ITEM_357,ITEM_356)
    ..populateLatestTable(ITEM_359,ITEM_358,ITEM_357,ITEM_356)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    guaranteedMultiDropHash.put(BOSS_CREEP[6], dragonSixTable)
    // Dragon VII
    let dragonSevenTable = new MultipleDropTable()
    dragonSevenTable..populateLatestTable(ITEM_359,ITEM_358,ITEM_357,ITEM_356)
    ..populateLatestTable(ITEM_359,ITEM_358,ITEM_357,ITEM_356)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_349, ITEM_350)
    guaranteedMultiDropHash.put(BOSS_CREEP[7], dragonSevenTable)
    // Dragon VIII
    let dragonEightTable = new MultipleDropTable()
    dragonEightTable..populateLatestTable(ITEM_359,ITEM_358,ITEM_357,ITEM_356)
    ..populateLatestTable(ITEM_359,ITEM_358,ITEM_357,ITEM_356)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    ..populateLatestTable(ITEM_351)
    ..populateLatestTable(ITEM_342,ITEM_343,ITEM_344,ITEM_345,ITEM_346)
    guaranteedMultiDropHash.put(BOSS_CREEP[8], dragonEightTable)

function restBossCreepEnumerate()
    // Water 1
    let waterOneTable = new MultipleDropTable()
    waterOneTable..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_117)
    ..populateLatestTable(ITEM_121)
    guaranteedMultiDropHash.put(BOSS_CREEP[9], waterOneTable)
    // Water 2
    let waterTwoTable = new MultipleDropTable()
    waterTwoTable..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_121)
    ..populateLatestTable(ITEM_708)
    ..populateLatestTable(ITEM_350)
    guaranteedMultiDropHash.put(BOSS_CREEP[10], waterTwoTable)
    // Water 3
    let waterThreeTable = new MultipleDropTable()
    waterThreeTable..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_351)
    ..populateLatestTable(ITEM_121)
    ..populateLatestTable(ITEM_363)
    guaranteedMultiDropHash.put(BOSS_CREEP[11], waterThreeTable)
    // Water 4
    let waterFourTable = new MultipleDropTable()
    waterFourTable..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_348)
    ..populateLatestTable(ITEM_364)
    ..populateLatestTable(ITEM_121)
    ..populateLatestTable(ITEM_121)
    guaranteedMultiDropHash.put(BOSS_CREEP[12], waterFourTable)
    // Vampire 1
    let vampireOneTable = new MultipleDropTable()
    vampireOneTable..populateLatestTable(ITEM_328)
    ..populateLatestTable(ITEM_328)
    ..populateLatestTable(ITEM_328)
    ..populateLatestTable(ITEM_118)
    ..populateLatestTable(ITEM_353)
    ..populateLatestTable(ITEM_343,ITEM_344,ITEM_345,ITEM_346,ITEM_347,ITEM_348)
    guaranteedMultiDropHash.put(BOSS_CREEP[13], vampireOneTable)
    // Vampire 2
    let vampireTwoTable = new MultipleDropTable()
    vampireTwoTable..populateLatestTable(ITEM_328)
    ..populateLatestTable(ITEM_328)
    ..populateLatestTable(ITEM_328)
    ..populateLatestTable(ITEM_354)
    ..populateLatestTable(ITEM_110)
    ..populateLatestTable(ITEM_343,ITEM_344,ITEM_345,ITEM_346,ITEM_347,ITEM_348)
    guaranteedMultiDropHash.put(BOSS_CREEP[14], vampireTwoTable)
    // Tower 1
    let towerOneTable = new ItemTable()
    towerOneTable.populateTable(ITEM_365)
    guaranteedSingleDrophash.put(BOSS_CREEP[15], towerOneTable)
    // Tower 2
    let towerTwoTable = new ItemTable()
    towerTwoTable.populateTable(ITEM_366)
    guaranteedSingleDrophash.put(BOSS_CREEP[16], towerTwoTable)
    // Tower 3
    let towerThreeTable = new ItemTable()
    towerThreeTable.populateTable(ITEM_367)
    guaranteedSingleDrophash.put(BOSS_CREEP[17], towerThreeTable)
    // Tower 4
    let towerFourTable = new ItemTable()
    towerFourTable.populateTable(ITEM_368)
    guaranteedSingleDrophash.put(BOSS_CREEP[18], towerFourTable)
    // Tower 5
    let towerFiveTable = new ItemTable()
    towerFiveTable.populateTable(ITEM_369)
    guaranteedSingleDrophash.put(BOSS_CREEP[19], towerFiveTable)
    // Tower 6
    let towerSixTable = new ItemTable()
    towerSixTable.populateTable(ITEM_370)
    guaranteedSingleDrophash.put(BOSS_CREEP[20], towerSixTable)
    // Tower 7
    let towerSevenTable = new ItemTable()
    towerSevenTable.populateTable(ITEM_354)
    guaranteedSingleDrophash.put(BOSS_CREEP[21], towerSevenTable)
    // Tower 8
    let towerEightTable = new ItemTable()
    towerEightTable.populateTable(ITEM_371)
    guaranteedSingleDrophash.put(BOSS_CREEP[22], towerEightTable)

function dropListEnumerate()
    leftCreepEnumerate1()
    leftCreepEnumerate2()
    leftCreepEnumerate3()
    rightCreepEnumerate()
    dragonBossCreepEnumerate()
    restBossCreepEnumerate()

class ItemTable //100% drop rate
    private HashList<int> itemsListed

    construct()
        this.itemsListed = new HashList<int>

    function populateTable(vararg int itemsListed)
        for items in itemsListed
            this.itemsListed.add(items)

    function giveFromTable(vec2 pos)
        createItem(this.itemsListed.getRandomElement(), pos)

    function giveUnitFromTable(unit toGiveTo)
        toGiveTo.addItemById(this.itemsListed.getRandomElement())
    
class ChanceItemTable extends ItemTable //% based drop rate
    private int dropChance

    construct(int dropChance)
        this.dropChance = dropChance

    function dropCheck(vec2 pos)
        if GetRandomInt(1, 100) <= this.dropChance
            giveFromTable(pos)

class MultipleDropTable //100% drop rate
    HashList<ItemTable> itemTables

    construct()
        this.itemTables = new HashList<ItemTable>

    function populateLatestTable(vararg int itemsListed) // Populates the latest table
        let newTable = new ItemTable
        for items in itemsListed
            newTable.populateTable(items)
        this.itemTables.add(newTable)
        
    function multiDrop(vec2 pos)
        this.itemTables.forEach() (ItemTable t) ->
            t.giveFromTable(pos)

class MultiChanceMultiDropTable //% based drop rate
    HashList<ChanceItemTable> itemTables

    construct()
        this.itemTables = new HashList<ChanceItemTable>
    function populateLatestTable(vararg int itemsListed) // populates the latest table, first number is drop Chance
        let listedList = new HashList<int>
        for items in itemsListed
            listedList.add(items)
        let newTable = new ChanceItemTable(listedList.get(0))
        listedList.removeAt(0)
        listedList.forEach() (integer items) ->
            newTable.populateTable(items)
    
    function multiDrop(vec2 pos)
        this.itemTables.forEach() (ChanceItemTable t) ->
            t.dropCheck(pos)

class SingleChanceMultiDropTable //Single % based for random item from each table
    HashList<ItemTable> itemTables
    private int dropChance

    construct(int dropChance)
        this.dropChance = dropChance
        this.itemTables = new HashList<ItemTable>
    
    function populateLatestTable(vararg int itemsListed) // Populates the latest table
        let newTable = new ItemTable
        for items in itemsListed
            newTable.populateTable(items)
        this.itemTables.add(newTable)
    
    function multiDrop(vec2 pos)
        if GetRandomInt(1, 100) <= dropChance
            this.itemTables.forEach() (ItemTable t) ->
                t.giveFromTable(pos)



class DropList
    // dropPool.size() = amount of drop pools, dropPool.get(i).size = amount in i drop pool
    HashList<HashList<int>> dropPool
    // dropPoolCutoff.get(i).size = Amount of dropCutoffs in dropPool. dropPoolCutoff.get(i) = Amount of drops in cutoff
    HashList<HashList<int>> dropPoolCutoff
    HashList<int> dropChance // drop chance for each drop pool

    construct(HashList<HashList<int>> dropPool, HashList<int> dropChance)
        this.dropPool = new HashList<HashList<int>>(dropPool)
        let cutOff = new HashList<int>
        cutOff.add(dropPool.get(0).size())
        let cutOffLinked = new HashList<HashList<int>>
        cutOffLinked.add(cutOff)
        this.dropPoolCutoff = new HashList<HashList<int>>(cutOffLinked)
        this.dropChance = new HashList<int>(dropChance)
    construct(HashList<HashList<int>> dropPool, HashList<HashList<int>> dropPoolCutoff, HashList<int> dropChance)
        this.dropPool = new HashList<HashList<int>>(dropPool)
        this.dropPoolCutoff = new HashList<HashList<int>>(dropPoolCutoff)
        this.dropChance = new HashList<int>(dropChance)


init
    doPeriodically(30) (CallbackPeriodic cb) ->
        dropItemsToStore.forEach() (item t) ->
            if(itemPickedup.has(t))
                dropItemsToStore.remove(t)
            else
                let iteId = t.getTypeId()
                itemDropsInTavern.put(iteId, itemDropsInTavern.get(iteId) + 1)
                itemDropsEnumerator.add(iteId)
                updateItemPool()
                dropItemsToStore.remove(t)
                t.remove()

public function unit.giveDropItem(int targetUnit)
    if chanceSingleDropHash.has(targetUnit)
        chanceSingleDropHash.get(targetUnit).giveUnitFromTable(this)
    if guaranteedSingleDrophash.has(targetUnit)
        guaranteedSingleDrophash.get(targetUnit).giveUnitFromTable(this)
    if multiChanceMultiDropHash.has(targetUnit)
        multiChanceMultiDropHash.get(targetUnit).itemTables.getRandomElement().giveUnitFromTable(this)
    if guaranteedMultiDropHash.has(targetUnit)
        guaranteedMultiDropHash.get(targetUnit).itemTables.getRandomElement().giveUnitFromTable(this)
    if singleChanceMultiDropHash.has(targetUnit)
        singleChanceMultiDropHash.get(targetUnit).itemTables.getRandomElement().giveUnitFromTable(this)

function guaranteedSingleDropper(int uid, vec2 pos)
    guaranteedSingleDrophash.get(uid).giveFromTable(pos)

function guaranteedMultiDropper(int uid, vec2 pos)
    guaranteedMultiDropHash.get(uid).multiDrop(pos)

function chanceSingleDropper(int uid, vec2 pos)
    chanceSingleDropHash.get(uid).dropCheck(pos)

function chanceMultiDropper(int uid, vec2 pos)
    multiChanceMultiDropHash.get(uid).multiDrop(pos)


public function unit.dropItems()
    let uid = this.getTypeId()

    if chanceSingleDropHash.has(uid)
        chanceSingleDropper(uid, this.getPos())
    if guaranteedSingleDrophash.has(uid)
        guaranteedSingleDropper(uid, this.getPos())
    if multiChanceMultiDropHash.has(uid)
        chanceMultiDropper(uid, this.getPos())
    if guaranteedMultiDropHash.has(uid)
        guaranteedMultiDropper(uid, this.getPos())
    
        
    /*if dropListHash.has(uid)
        let dropList = dropListHash.get(uid)
        for int i = 0 to dropList.dropPool.size() - 1
            let chance = dropList.dropChance.get(i)
            if GetRandomInt(1, 100) <= chance
                let pos = this.getPos()
                var lastCount = 0
                for int j = 0 to dropList.dropPoolCutoff.get(i).size() - 1
                    let cutOff = lastCount + dropList.dropPoolCutoff.get(i).get(j)
                    let random = GetRandomInt(lastCount, cutOff - 1)
                    lastCount = cutOff
                    let iteId = dropList.dropPool.get(i).get(random)
                    dropItemsToStore.add(createItem(iteId, pos))*/

public function dropMyItemsMinibosses(unit u)
    let pos = u.getPos()
    for i = 1 to 5
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(1,10)],pos)
            createItem(ITEM_DROP[GetRandomInt(1,10)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 6 to 10
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(1,10)],pos)
            createItem(ITEM_DROP[GetRandomInt(1,10)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 11 to 15
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(1,15)],pos)
            createItem(ITEM_DROP[GetRandomInt(1,10)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 16 to 20
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(5,15)],pos)
            createItem(ITEM_DROP[GetRandomInt(1,10)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 21 to 25
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(10,20)],pos)
            createItem(ITEM_DROP[GetRandomInt(5,15)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 26 to 30
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(20,25)],pos)
            createItem(ITEM_DROP[GetRandomInt(20,25)],pos)
            createItem(ITEM_DROP[GetRandomInt(20,25)],pos)
            createItem(ITEM_DROP[GetRandomInt(30,35)],pos)
            createItem(ITEM_DROP[GetRandomInt(35,40)],pos)
            createItem(ITEM_DROP[53],pos)
            createItem(ITEM_DROP[53],pos)
            createItem(ITEM_DROP[53],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 31 to 35
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(10,20)],pos)
            createItem(ITEM_DROP[GetRandomInt(5,15)],pos)
    for i = 36 to 40
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(10,20)],pos)
            createItem(ITEM_DROP[GetRandomInt(5,15)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 41 to 45
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(15,25)],pos)
            createItem(ITEM_DROP[GetRandomInt(5,15)],pos)
    for i = 46 to 50
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(15,25)],pos)
            createItem(ITEM_DROP[GetRandomInt(10,20)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 51 to 55
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(20,30)],pos)
            createItem(ITEM_DROP[GetRandomInt(10,20)],pos)
    for i = 56 to 58
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(30,50)],pos)
            createItem(ITEM_DROP[GetRandomInt(30,50)],pos)
            createItem(ITEM_DROP[GetRandomInt(30,50)],pos)
            createItem(ITEM_DROP[GetRandomInt(30,50)],pos)
            createItem(ITEM_DROP[53],pos)
            createItem(ITEM_DROP[53],pos)
            createItem(ITEM_DROP[53],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 59 to 62
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(20,30)],pos)
            createItem(ITEM_DROP[GetRandomInt(10,20)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 63 to 67
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(20,30)],pos)
            createItem(ITEM_DROP[GetRandomInt(10,20)],pos)
    for i = 68 to 72
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(25,35)],pos)
            createItem(ITEM_DROP[GetRandomInt(20,30)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 73 to 77
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(25,35)],pos)
            createItem(ITEM_DROP[GetRandomInt(20,30)],pos)
    for i = 78 to 82
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(30,40)],pos)
            createItem(ITEM_DROP[GetRandomInt(20,30)],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 83 to 84
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(51,62)],pos)
            createItem(ITEM_DROP[GetRandomInt(51,59)],pos)
            createItem(ITEM_DROP[GetRandomInt(30,52)],pos)
            createItem(ITEM_DROP[GetRandomInt(30,52)],pos)
            createItem(ITEM_DROP[GetRandomInt(40,52)],pos)
            createItem(ITEM_DROP[53],pos)
            createItem(ITEM_DROP[53],pos)
            createItem(ITEM_DROP[53],pos)
            createItem(ITEM_DROP[53],pos)
    for i = 85 to 85
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(30,40)],pos)
            createItem(ITEM_DROP[GetRandomInt(20,30)],pos)
            createItem(ITEM_DROP[GetRandomInt(51,53)],pos)
    for i = 86 to 90
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(30,40)],pos)
            createItem(ITEM_DROP[GetRandomInt(20,30)],pos)
            createItem(ITEM_DROP[GetRandomInt(51,53)],pos)
    for i = 86 to 90
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(30,40)],pos)
            createItem(ITEM_DROP[GetRandomInt(20,30)],pos)
            createItem(ITEM_DROP[GetRandomInt(51,53)],pos)
    for i = 91 to 95
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(35,45)],pos)
            createItem(ITEM_DROP[GetRandomInt(30,40)],pos)
            createItem(ITEM_DROP[GetRandomInt(51,53)],pos)
    for i = 96 to 100
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(35,45)],pos)
            createItem(ITEM_DROP[GetRandomInt(30,40)],pos)
            createItem(ITEM_DROP[GetRandomInt(51,53)],pos)
    for i = 101 to 105
        if GetUnitTypeId(u) == WAVE_BOSS[i]
            createItem(ITEM_DROP[GetRandomInt(40,50)],pos)
            createItem(ITEM_DROP[GetRandomInt(30,40)],pos)
            createItem(ITEM_DROP[GetRandomInt(51,53)],pos)

    if GetUnitTypeId(u) == WAVE_HERO_0
        createItem(ITEM_DROP[GetRandomInt(62,64)],pos)
        createItem(ITEM_DROP[GetRandomInt(62,64)],pos)
        createItem(ITEM_DROP[GetRandomInt(54,56)],pos)
        createItem(ITEM_DROP[GetRandomInt(50,53)],pos)
        createItem(ITEM_DROP[GetRandomInt(50,54)],pos)
        createItem(ITEM_DROP[53],pos)
    else if GetUnitTypeId(u) == WAVE_HERO_1
        createItem(ITEM_DROP[GetRandomInt(63,64)],pos)
        createItem(ITEM_DROP[GetRandomInt(62,65)],pos)
        createItem(ITEM_DROP[GetRandomInt(54,56)],pos)
        createItem(ITEM_DROP[GetRandomInt(54,59)],pos)
        createItem(ITEM_DROP[GetRandomInt(57,59)],pos)
        createItem(ITEM_DROP[53],pos)
    else if GetUnitTypeId(u) == WAVE_HERO_2
        createItem(ITEM_DROP[GetRandomInt(63,65)],pos)
        createItem(ITEM_DROP[GetRandomInt(64,65)],pos)
        createItem(ITEM_DROP[GetRandomInt(59,62)],pos)
        createItem(ITEM_DROP[GetRandomInt(61,63)],pos)
        createItem(ITEM_DROP[53],pos)
    else if GetUnitTypeId(u) == WAVE_HERO_3
        createItem(ITEM_DROP[GetRandomInt(64,65)],pos)
        createItem(ITEM_DROP[GetRandomInt(60,62)],pos)
        createItem(ITEM_DROP[GetRandomInt(61,63)],pos)
        createItem(ITEM_DROP[GetRandomInt(66,68)],pos)
        createItem(ITEM_DROP[65],pos)
        createItem(ITEM_DROP[53],pos)
    else if GetUnitTypeId(u) == WAVE_HERO_4
        createItem(ITEM_DROP[GetRandomInt(60,63)],pos)
        createItem(ITEM_DROP[62],pos)
        createItem(ITEM_DROP[63],pos)
        createItem(ITEM_DROP[64],pos)
        createItem(ITEM_DROP[65],pos)
        createItem(ITEM_DROP[GetRandomInt(66,68)],pos)
        createItem(ITEM_DROP[GetRandomInt(66,68)],pos)
        createItem(ITEM_DROP[53],pos)
        createItem(ITEM_DROP[53],pos)
    else if GetUnitTypeId(u) == WAVE_HERO_21
        createItem(ITEM_372,pos)
        createItem(ITEM_350,pos)
    else if GetUnitTypeId(u) == WAVE_HERO_26
        createItem(ITEM_351,pos)
        createItem(ITEM_361,pos)
        createItem(ITEM_276,pos)
        createItem(ITEM_352,pos)
        createItem(ITEM_355,pos)
        createItem(ITEM_176,pos)
        createItem(ITEM_111,pos)