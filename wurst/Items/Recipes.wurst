package Recipes

import LinkedList

public class Recipe
    let items = new LinkedList<int>
    int completedItem

    ondestroy
        destroy items

    construct()

    function populateRecipe(vararg int itemsInRecipe) // Let first item be completed Item, rest are components
        let tempList = new LinkedList<int>
        for items in itemsInRecipe
            tempList.add(items)
        completedItem = tempList.get(0)
        tempList.remove(0)
        items.addAll(tempList)

    construct(int item1, int item2, int completedItem)
        items.add(item1)
        items.add(item2)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int item5, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        items.add(item5)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int item5, int item6, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        items.add(item5)
        items.add(item6)
        this.completedItem = completedItem

public let recipes = new LinkedList<Recipe>
public let crafterRecipes = new LinkedList<Recipe>

public function addRecipe(int item1, int item2, int completedItem)
    recipes.add(new Recipe(item1, item2, completedItem))

public function addRecipe(int item1, int item2, int item3, int completedItem)
    recipes.add(new Recipe(item1, item2, item3, completedItem))

public function addRecipe(int item1, int item2, int item3, int item4, int completedItem)
    recipes.add(new Recipe(item1, item2, item3, item4, completedItem))

public function addRecipe(int item1, int item2, int item3, int item4, int item5, int completedItem)
    recipes.add(new Recipe(item1, item2, item3, item4, item5, completedItem))

public function addRecipe(int item1, int item2, int item3, int item4, int item5, int item6, int completedItem)
    recipes.add(new Recipe(item1, item2, item3, item4, item5, item6, completedItem))

public function unit.checkRecipe()
    var itemFound = -1
    let origInventory = new LinkedList<item>
    let deleteInventory = new LinkedList<item>
    for int i = 0 to 5
        if(this.itemInSlot(i) != null)
            origInventory.add(this.itemInSlot(i))
    for int i = 0 to recipes.size() - 1
        deleteInventory.clear()
        let recip = recipes.get(i)
        for int j = 0 to origInventory.size()
            for int k = 0 to recip.items.size() - 1
                let testItem = recip.items.get(k)
                if(testItem == origInventory.get(j).getTypeId())
                    deleteInventory.add(origInventory.get(j))
                    break
        if(deleteInventory.size() == recip.items.size())
            itemFound = i
            break
    if(itemFound > -1)
        deleteInventory.forEach() (item t) ->
            t.remove()
        this.addItemById(recipes.get(itemFound).completedItem)
    destroy origInventory
    destroy deleteInventory