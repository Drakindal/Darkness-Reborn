package Recipes

import HashSet

class Recipe
    let items = new HashSet<int>
    int completedItem

    construct(int item1, int item2, int completedItem)
        items.add(item1)
        items.add(item2)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int item5, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        items.add(item5)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int item5, int item6, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        items.add(item5)
        items.add(item6)
        this.completedItem = completedItem

let recipes = new HashSet<Recipe>
let crafterRecipes = new HashSet<Recipe>

public function addRecipe(int item1, int item2, int completedItem)
    recipes.add(new Recipe(item1, item2, completedItem))

public function addRecipe(int item1, int item2, int item3, int completedItem)
    recipes.add(new Recipe(item1, item2, item3, completedItem))

public function addRecipe(int item1, int item2, int item3, int item4, int completedItem)
    recipes.add(new Recipe(item1, item2, item3, item4, completedItem))

public function addRecipe(int item1, int item2, int item3, int item4, int item5, int completedItem)
    recipes.add(new Recipe(item1, item2, item3, item4, item5, completedItem))

public function addRecipe(int item1, int item2, int item3, int item4, int item5, int item6, int completedItem)
    recipes.add(new Recipe(item1, item2, item3, item4, item5, item6, completedItem))

public function unit.checkRecipe()
    int itemFound = -1
    item array items
    items[0] = this.itemInSlot(0)
    items[1] = this.itemInSlot(1)
    items[2] = this.itemInSlot(2)
    items[3] = this.itemInSlot(3)
    items[4] = this.itemInSlot(4)
    items[5] = this.itemInSlot(5)
    for int i = 0 to recipes.size() - 1
        int removeSize = 0
        let recip = recipes.get(i)
        for int j = 0 to 5
            for int k = 0 to recip.items.size() - 1
                if(k > removeSize - 1)
                    if(recip.items.get(k) == items[j].getTypeId())
                        removeSize++
        if(removeSize == recip.items.size() - 1)
            itemFound = i
            break
    if(itemFound > -1)
        let recip = recipes.get(itemFound)
        for int i = 0 to recip.items.size() -1
            this.getItemById(recip.items.get(i)).remove()
        this.addItemById(recip.completedItem)