package Recipes

import LinkedList

class Recipe
    let items = new LinkedList<int>
    int completedItem

    ondestroy
        destroy items

    construct()

    function populateRecipe(vararg int itemsInRecipe) // Let first item be completed Item, rest are components
        let tempList = new LinkedList<int>
        for items in itemsInRecipe
            tempList.add(items)
        completedItem = tempList.get(0)
        tempList.remove(0)
        items.addAll(tempList)

    construct(int item1, int completedItem)
        items.add(item1)
        this.completedItem = completedItem

    construct(int item1, int item2, int completedItem)
        items.add(item1)
        items.add(item2)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int item5, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        items.add(item5)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int item5, int item6, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        items.add(item5)
        items.add(item6)
        this.completedItem = completedItem

public class RecipeList
    let recipeList = new LinkedList<Recipe>()

    function addRecipe(int item1, int completedItem)
        recipeList.add(new Recipe(item1, completedItem))

    function addRecipe(int item1, int item2, int completedItem)
        recipeList.add(new Recipe(item1, item2, completedItem))

    function addRecipe(int item1, int item2, int item3, int completedItem)
        recipeList.add(new Recipe(item1, item2, item3, completedItem))

    function addRecipe(int item1, int item2, int item3, int item4, int completedItem)
        recipeList.add(new Recipe(item1, item2, item3, item4, completedItem))

    function addRecipe(int item1, int item2, int item3, int item4, int item5, int completedItem)
        recipeList.add(new Recipe(item1, item2, item3, item4, item5, completedItem))

    function addRecipe(int item1, int item2, int item3, int item4, int item5, int item6, int completedItem)
        recipeList.add(new Recipe(item1, item2, item3, item4, item5, item6, completedItem))
    
    function size() returns int
        return recipeList.size()

    function get(int i) returns Recipe
        return recipeList.get(i)

    function checkRecipePosition(LinkedList<item> unitInventory) returns int
        var itemFound = -1
        for int i = 0 to recipeList.size() - 1 // March through all recipes to match
            let recip = recipeList.get(i) // Get ith recipe
            var testSucceed = 0
            for int j = 0 to unitInventory.size() // Loop through inventory
                for int k = 0 to recip.items.size() - 1 //Loop through all items
                    let testItem = recip.items.get(k) // Grab item to test
                    if(testItem == unitInventory.get(j).getTypeId()) // If recipe item is the same as inventory, go to next recipe item
                        testSucceed++
                        break
            if(testSucceed == recip.items.size()) // Test amount of success in finding item to item amount and then break
                itemFound = i
                break
        return itemFound

public function unit.checkRecipe(RecipeList recipeList)
    let origInventory = new LinkedList<item>
    for int i = 0 to 5
        if(this.itemInSlot(i) != null)
            origInventory.add(this.itemInSlot(i))
    let recipePos = recipeList.checkRecipePosition(origInventory)
    if(recipePos > -1)
        let foundRecipe = recipeList.get(recipePos)
        for int i = 0 to foundRecipe.items.size() - 1 // All the items in the found recipe loop through
            let testItem = foundRecipe.items.get(i) // Grab item to test
            for int j = 0 to origInventory.size() - 1 // Loop through the inventory
                if(testItem == origInventory.get(j).getTypeId()) // If found item to remove, remove item and go to next recipe item
                    origInventory.get(j).remove()
                    break

        this.addItemById(foundRecipe.completedItem)
        destroy origInventory