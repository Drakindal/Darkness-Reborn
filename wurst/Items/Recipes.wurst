package Recipes

import LinkedList

class Recipe
    let items = new LinkedList<int>
    int completedItem

    ondestroy
        destroy items

    construct()

    function populateRecipe(vararg int itemsInRecipe) // Let first item be completed Item, rest are components
        let tempList = new LinkedList<int>
        for items in itemsInRecipe
            tempList.add(items)
        completedItem = tempList.get(0)
        tempList.remove(0)
        items.addAll(tempList)

    construct(int item1, int completedItem)
        items.add(item1)
        this.completedItem = completedItem

    construct(int item1, int item2, int completedItem)
        items.add(item1)
        items.add(item2)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int item5, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        items.add(item5)
        this.completedItem = completedItem

    construct(int item1, int item2, int item3, int item4, int item5, int item6, int completedItem)
        items.add(item1)
        items.add(item2)
        items.add(item3)
        items.add(item4)
        items.add(item5)
        items.add(item6)
        this.completedItem = completedItem

public class RecipeList
    let recipeList = new LinkedList<Recipe>()

    function addRecipe(int item1, int completedItem)
        recipeList.add(new Recipe(item1, completedItem))

    function addRecipe(int item1, int item2, int completedItem)
        recipeList.add(new Recipe(item1, item2, completedItem))

    function addRecipe(int item1, int item2, int item3, int completedItem)
        recipeList.add(new Recipe(item1, item2, item3, completedItem))

    function addRecipe(int item1, int item2, int item3, int item4, int completedItem)
        recipeList.add(new Recipe(item1, item2, item3, item4, completedItem))

    function addRecipe(int item1, int item2, int item3, int item4, int item5, int completedItem)
        recipeList.add(new Recipe(item1, item2, item3, item4, item5, completedItem))

    function addRecipe(int item1, int item2, int item3, int item4, int item5, int item6, int completedItem)
        recipeList.add(new Recipe(item1, item2, item3, item4, item5, item6, completedItem))

    function size() returns int
        return recipeList.size()

    function get(int i) returns Recipe
        return recipeList.get(i)

    function checkRecipePosition(LinkedList<item> unitInventory) returns int
        var itemFound = -1
        for int i = 0 to recipeList.size() - 1
            let recip = recipeList.get(i)
            for int j = 0 to unitInventory.size()
                for int k = 0 to recip.items.size() - 1
                    let testItem = recip.items.get(k)
                    if(testItem == unitInventory.get(j).getTypeId())
                        break
        if(itemFound > -1)
            itemFound = recipeList.get(itemFound).completedItem
        return itemFound

public function unit.checkRecipe(RecipeList recipeList)
    let origInventory = new LinkedList<item>
    for int i = 0 to 5
        if(this.itemInSlot(i) != null)
            origInventory.add(this.itemInSlot(i))
    let recipePos = recipeList.checkRecipePosition(origInventory)
    if(recipePos > -1)
        let foundRecipe = recipeList.get(recipePos)
        for int i = 0 to foundRecipe.items.size()
            this.removeItemById(foundRecipe.items.get(i))
        this.addItemById(foundRecipe.completedItem)
        destroy origInventory