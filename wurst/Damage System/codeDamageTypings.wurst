package codeDamageTypings
import HashMap
import DamageEvent

public let magicResistMap = new HashMap<integer, real>
public let physicalPenetrationMap = new HashMap<integer, real>
let physPenItemHash = new HashMap<int, real>

public function unit.addPhysPenItem(item i)
    let physPen = physPenItemHash.get(i.getTypeId())
    if(physPen > 0)
        this.enumeratePhysicalPenetration(physicalPenetrationMap.get(this.getTypeId()) * 100 + physPen)

public function unit.subtractPhysPenItem(item i)
    let physPen = physPenItemHash.get(i.getTypeId())
    if(physPen > 0)
        this.enumeratePhysicalPenetration(physicalPenetrationMap.get(this.getTypeId()) * 100 - physPen)

public function int.putInItemHash(real input)
    physPenItemHash.put(this, input)  

public function unit.enumerateMagicResistance(real magicResistance)
    magicResistMap.put(this.getTypeId(), magicResistance/100)

public function integer.enumerateMagicResistanceId(real magicResistance)
    magicResistMap.put(this, magicResistance/100)

public function unit.enumeratePhysicalPenetration(real physicalPenetration)
    physicalPenetrationMap.put(this.getTypeId(), physicalPenetration/100)

public function integer.enumeratePhysicalPenetrationId(real physicalPenetration)
    physicalPenetrationMap.put(this, physicalPenetration/100)

public function unit.magicalDamageCodeElementId(real amount, unit target, DamageElement element, integer id)
    DamageEvent.setNextDamageElement(element)
    DamageEvent.setNextDamageFromCode()
    DamageEvent.setNextDamageId(id)
    this.damageTarget(target, amount * (1-magicResistMap.get(target.getTypeId())), false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)

public function unit.magicalDamageCodeElement(real amount, unit target, DamageElement element)
    DamageEvent.setNextDamageElement(element)
    DamageEvent.setNextDamageFromCode()
    this.damageTarget(target, amount * (1-magicResistMap.get(target.getTypeId())), false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)

public function unit.magicalDamageCodeId(real amount, unit target, integer id)
    DamageEvent.setNextDamageFromCode()
    DamageEvent.setNextDamageId(id)
    this.damageTarget(target, amount * (1-magicResistMap.get(target.getTypeId())), false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)

public function unit.magicalDamageCode(real amount, unit target)
    DamageEvent.setNextDamageFromCode()
    this.damageTarget(target, amount * (1-magicResistMap.get(target.getTypeId())), false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)

public function unit.physicalDamageCodeElementId(real amount, unit target, DamageElement element, integer id)
    DamageEvent.setNextDamageElement(element)
    DamageEvent.setNextDamageFromCode()
    DamageEvent.setNextDamageId(id)
    this.damageTarget(target, amount * (1-physicalPenetrationMap.get(target.getTypeId())), false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)

public function unit.physicalDamageCodeId(real amount, unit target, integer id)
    DamageEvent.setNextDamageFromCode()
    DamageEvent.setNextDamageId(id)
    this.damageTarget(target, amount * (1-physicalPenetrationMap.get(target.getTypeId())), false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)

public function unit.physicalDamageCodeElement(real amount, unit target, DamageElement element)
    DamageEvent.setNextDamageElement(element)
    DamageEvent.setNextDamageFromCode()
    this.damageTarget(target, amount * (1-physicalPenetrationMap.get(target.getTypeId())), false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)

public function unit.physicalDamageCode(real amount, unit target)
    DamageEvent.setNextDamageFromCode()
    this.damageTarget(target, amount * (1-physicalPenetrationMap.get(target.getTypeId())), false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)

public function unit.pureDamageCodeElementId(real amount, unit target, DamageElement element, integer id)
    DamageEvent.setNextDamageElement(element)
    DamageEvent.setNextDamageFromCode()
    DamageEvent.setNextDamageId(id)
    this.damageTarget(target, amount, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)

public function unit.pureDamageCodeElementId(real amount, unit target, integer id)
    DamageEvent.setNextDamageFromCode()
    DamageEvent.setNextDamageId(id)
    this.damageTarget(target, amount, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)

public function unit.pureDamageCodeElement(real amount, unit target, DamageElement element)
    DamageEvent.setNextDamageElement(element)
    DamageEvent.setNextDamageFromCode()
    this.damageTarget(target, amount, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)

public function unit.pureDamageCode(real amount, unit target)
    DamageEvent.setNextDamageFromCode()
    this.damageTarget(target, amount, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)