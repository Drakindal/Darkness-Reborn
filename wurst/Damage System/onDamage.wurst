package onDamage
import MyUnitIds
// import DamageDetection
import DamageEvent
import MyAbilityIds
import codeDamageTypings
import MyBuffIds
import WaveHeroSetup
import DragonTurtle
import Turtle
import A0RI_R
import A0RL_E
import ThornsAuraWave
import Global_Variables
import AbilitiesList

@configurable constant DETECT_NATIVE_ABILITIES = true


let difficultyDamageIncrease = [0.5, 0.75, 1., 1.5, 2.]

texttag justaposeCrit

function unit.calculateMagicRes() returns real
    let magicResCalc = this.getRes(resistanceType.MAGICAL)
    return 1-(magicResCalc)

function returnReducedDamage() returns real
    return DamageEvent.getUnreducedOriginalAmount() - DamageEvent.getAmount()

init
    DamageEvent.addListener(0) -> 
        let src = DamageEvent.getSource()
        let targ = DamageEvent.getTarget()
        src.wasAttacked()
        if(src.isEnemyOf(players[10]))
            DamageEvent.setAmount(DamageEvent.getAmount() * difficultyDamageIncrease[gameMode])
        switch DamageEvent.getType()
            case ATTACK
                if(returnReducedDamage() > 0)
                    DamageEvent.addAmount(returnReducedDamage() * src.getPen(penetrationType.PHYSICAL))
                if src.isRanged()
                    physicalDamageChecks(0, src, targ, WEAPON_TYPE_AXE_MEDIUM_CHOP)
                else
                    physicalDamageChecks(0, src, targ, WEAPON_TYPE_WHOKNOWS)

                // Warden T ability.
                if src.hasAbility('B003')
                    src.removeAbility('B003')

            case SPELL
                magicDamageChecks(0, src, targ)
                
            case CODE
                let damId = DamageEvent.getId()
                // Why increase the damage?
                // DamageEvent.setAmount(DamageEvent.getAmount() * 1.111111111)
                if(DamageEvent.getDamageType() == DAMAGE_TYPE_NORMAL)
                    if(returnReducedDamage() > 0 and unitStatMap.has(src.getTypeId()))
                        DamageEvent.addAmount(returnReducedDamage() * src.getPen(penetrationType.PHYSICAL))
                    physicalDamageChecks(damId, src, targ, DamageEvent.getWeaponType())
                else if (DamageEvent.getDamageType() == DAMAGE_TYPE_MAGIC)
                    magicDamageChecks(damId, src, targ)
            default

    DamageEvent.addListener(1) ->
        let src = DamageEvent.getSource()
        let targ = DamageEvent.getTarget()
        if (DamageEvent.getType() == ATTACK)
            let damtyp = DamageEvent.getDamageType()
            if (damtyp == DAMAGE_TYPE_NORMAL or damtyp == DAMAGE_TYPE_MAGIC)
                
                for abilityInfo in abilitiesListOnDamageTaken
                    if (targ.hasItemById(abilityInfo.itemId))
                        abilityInfo.handler.run(src, targ)
                
    DamageEvent.addListener(2) ->
        let src = DamageEvent.getSource()
        let targ = DamageEvent.getTarget()
        if (DamageEvent.getType() == ATTACK)
            if src.isIllusion()
                skip
            else
                let damtyp = DamageEvent.getDamageType()
                if (damtyp == DAMAGE_TYPE_NORMAL or damtyp == DAMAGE_TYPE_MAGIC)
                    
                    for abilityInfo in abilitiesListOnDamageDealt
                        if (src.hasItemById(abilityInfo.itemId))
                            abilityInfo.handler.run(src, targ)

function magicDamageChecks(int damId, unit src, unit targ)
    if(targ.getAbilityLevel(UTHER_ABIL_3) > 0)
        DamageEvent.setAmount(DamageEvent.getAmount() * (1-0.02*targ.getAbilityLevel(UTHER_ABIL_3)))
    DamageEvent.setAmount(DamageEvent.getAmount() * targ.calculateMagicRes())

function physicalDamageChecks(int damId, unit src, unit targ, weapontype notRanged)
    // Uther Damage reduction
    if(targ.getAbilityLevel(UTHER_ABIL_3) > 0)
        DamageEvent.setAmount(DamageEvent.getAmount() * (1-0.02*targ.getAbilityLevel(UTHER_ABIL_3)))
    // Wolfman attack
    if src.hasAbility(WOLF_BUFF_1)
        src.addHP(DamageEvent.getAmount() * 0.25)
    // Reflection non-ranged
    if(notRanged == WEAPON_TYPE_WHOKNOWS)
        reflectionChecks(src, targ)

function reflectionChecks(unit src, unit targ)
    let dam = DamageEvent.getAmount()
    let targuID = targ.getTypeId()

    for abilityInfo in abilitiesListReflections
        if (targ.hasItemById(abilityInfo.itemId))
            abilityInfo.handler.run(src, targ)

    if(targuID == WAVE_MOB_18)
        turtle(targ, src, dam)
    if(targuID == WAVE_BOSS_95)
        dragonTurtle(targ, src, dam)
    if(targ.getAbilityLevel('A0RI') > 0)
        pitLordThorn(targ, src)
    if(targ.getAbilityLevel('a0RL') > 0)
        pitLordDemonSkin(targ, src, dam)
    if(targ.hasAbility('BEah'))
        thornsAuraWave(targ, src, dam)