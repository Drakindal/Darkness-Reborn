package onDamage
import MyUnitIds
// import DamageDetection
import DamageEvent
import MyAbilityIds
import A000_W
import Platinum1Stun
import Platinum2Stun
import ThiefTAbility
import LancelotSet
import HelmofHermes
import LancelotShield
import HolyGoldShield
import DeadEyes
import NobleSword
import NerubianStaff
import RavenBlade
import ApolloHelm
import CrystalArmor
import CrystalSpear
import BerserkerStaff
import Frostmourne
import ThunderBow
import ThunderBow2
import OrbofLightning
import codeDamageTypings
import MyItemIds
import MyBuffIds
import WaveHeroSetup
import PerfectAquamrina
import ReactiveArmor1
import ReactiveArmor2
import SpikedArmor
import SplitArmor
import DragonTurtle
import Turtle
import A0RI_R
import A0RL_E
import ThornsAuraWave

@configurable constant DETECT_NATIVE_ABILITIES = true

real array healLoaMultiplier = [0.14, 0.21, 0.28, 0.35, 0.42, 0.49, 0.56, 0.63, 0.70]
real array healVivpireMultiplier = [0.075, 0.15, 0.225, 0.3, 0.375, 0.45, 0.525, 0.6, 0.675]
texttag justaposeCrit

function unit.calculateMagicRes() returns real
    let magicResCalc = this.getMagicResist()
    return 1-(magicResCalc)

function returnReducedDamage() returns real
    return DamageEvent.getUnreducedOriginalAmount() - DamageEvent.getAmount()

init
    DamageEvent.addListener(0) -> 
        let src = DamageEvent.getSource()
        let targ = DamageEvent.getTarget()
        src.wasAttacked()
        switch DamageEvent.getType()
            case ATTACK
                if(returnReducedDamage() > 0)
                    DamageEvent.addAmount(returnReducedDamage() * src.getPhysPenetration())
                if src.isType(UNIT_TYPE_RANGED_ATTACKER)
                    physicalDamageChecks(0, src, targ, WEAPON_TYPE_AXE_MEDIUM_CHOP)
                else
                    physicalDamageChecks(0, src, targ, WEAPON_TYPE_WHOKNOWS)

                if src.hasAbility('B003')
                    src.removeAbility('B003')

            case SPELL
                magicDamageChecks(0, src, targ)
                
                // Improved Hakkar Buff
                if src.hasAbility(BUFF_21)
                    src.addHP(DamageEvent.getAmount()*0.8)
                
            case CODE
                let damId = DamageEvent.getId()

                if(DamageEvent.getDamageType() == DAMAGE_TYPE_NORMAL)
                    if(returnReducedDamage() > 0)
                        DamageEvent.addAmount(returnReducedDamage() * src.getPhysPenetration())
                    physicalDamageChecks(damId, src, targ, DamageEvent.getWeaponType())
                else if (DamageEvent.getDamageType() == DAMAGE_TYPE_MAGIC)
                    magicDamageChecks(damId, src, targ)
                
                // Ordinary Hakkar Buff or Improved Hakkar Buff
                if src.hasAbility(BUFF_20)
                    let lvl = src.getAbilityLevel(ABILITY_41)
                    src.addHP(DamageEvent.getAmount()*healLoaMultiplier[lvl-1])
                else if src.hasAbility(BUFF_21)
                    src.addHP(DamageEvent.getAmount()*0.8)
            default

    DamageEvent.addListener(1) ->
        let src = DamageEvent.getSource()
        let targ = DamageEvent.getTarget()
        if (DamageEvent.getType() == ATTACK)
            if (DamageEvent.getDamageType() == DAMAGE_TYPE_NORMAL or DamageEvent.getDamageType() == DAMAGE_TYPE_MAGIC)
                //Reflection for Melee only
                if(src.isType(UNIT_TYPE_MELEE_ATTACKER))
                    reflectionChecks(src, targ)
                //HermesHelm
                if targ.hasItemById(ITEM_233)
                    hermesHelm(targ, src)
                //Lancelot Armor
                if targ.hasItemById(ITEM_183) and GetRandomInt(0, 100) < 20
                    lancelotSetMana(targ)
                //LanceSet
                if targ.hasItemById(ITEM_362)
                    if(GetRandomInt(0, 100) < 30)
                        lancelotSetMana(targ)
                    if(GetRandomInt(0, 100) < 50)
                        lancelotSetHealth(targ)
                //LanceShield
                if targ.hasItemById(ITEM_182) and GetRandomInt(0, 100) < 30
                    lancelotShield(targ)
                //holyGoldShield
                if targ.hasItemById(ITEM_372) and GetRandomInt(0, 100) < 50
                    holyGoldShield(targ)
                //ApolloHelm
                if targ.hasItemById(ITEM_385) and GetRandomInt(0, 100) < 33 
                    apolloHelm(targ, src)
                //Crystal Armor
                if targ.hasItemById(ITEM_122) and GetRandomInt(0, 100) < 50
                    crystalArmor(targ, src)

    DamageEvent.addListener(2) ->
        let src = DamageEvent.getSource()
        let targ = DamageEvent.getTarget()
        if (DamageEvent.getType() == ATTACK)
            if (DamageEvent.getDamageType() == DAMAGE_TYPE_NORMAL or DamageEvent.getDamageType() == DAMAGE_TYPE_MAGIC)  and src.isIllusion() == false
                //deadEyes
                if src.hasItemById(ITEM_659) and GetRandomInt(0, 100) < 14
                    deadEyes(src, targ)

                //Noble Sword levels, integer is additive with 2xagi
                if src.hasItemById(ITEM_403) and GetRandomInt(0, 100) < 11
                    nobleSword(src, targ, 0)

                if src.hasItemById(ITEM_404) and GetRandomInt(0, 100) < 12
                    nobleSword(src, targ, 1)

                if src.hasItemById(ITEM_405) and GetRandomInt(0, 100) < 13
                    nobleSword(src, targ, 2)

                if src.hasItemById(ITEM_406) and GetRandomInt(0, 100) < 14
                    nobleSword(src, targ, 3)

                if src.hasItemById(ITEM_408) and GetRandomInt(0, 100) < 18
                    nobleSword(src, targ, 4)

                //Raven Blade levels, integer is multiplier by 2xstr
                if src.hasItemById(ITEM_638) and GetRandomInt(0, 100) < 12
                    ravenBlade(src, targ, 1)

                if src.hasItemById(ITEM_639) and GetRandomInt(0, 100) < 13
                    ravenBlade(src, targ, 2)

                if src.hasItemById(ITEM_640) and GetRandomInt(0, 100) < 14
                    ravenBlade(src, targ, 3)
                //Crystal Spear
                if src.hasItemById(ITEM_125) and GetRandomInt(0, 100) < 15
                    crystalSpear(src, targ)
                //Int Staff
                if src.hasItemById(ITEM_388) and GetRandomInt(0, 100) < 24
                    berserkerStaff(src, targ)

                if src.hasItemById(ITEM_658) and GetRandomInt(0, 100) < 24
                    nerubianStaff(src, targ)
                //Frostmourne
                if src.hasItemById(ITEM_699) and GetRandomInt(0, 100) < 15
                    frostmourne(targ)
                //Orb of Lightning
                if src.hasItemById(ITEM_24) and GetRandomInt(0, 100) < 20
                    orbofLightning(src)
                //ThunderBows
                if src.hasItemById(ITEM_230) and GetRandomInt(0, 100) < 10
                    thunderBow(src)

                if src.hasItemById(ITEM_680) and GetRandomInt(0, 100) < 15
                    thunderBow2(src)

                //Platinum 1
                if src.hasItemById(ITEM_187) and GetRandomInt(0, 100) < 25
                    platinum1Stun(src, targ)
                //Platinum 2
                if src.hasItemById(ITEM_249) and GetRandomInt(0, 100) < 25
                    platinum2Stun(src, targ)
    
function magicDamageChecks(int damId, unit src, unit targ)
    if(targ.getAbilityLevel(UTHER_ABIL_3) > 0)
        DamageEvent.setAmount(DamageEvent.getAmount() * (1-0.02*targ.getAbilityLevel(UTHER_ABIL_3)))
    DamageEvent.setAmount(DamageEvent.getAmount() * targ.calculateMagicRes())

function physicalDamageChecks(int damId, unit src, unit targ, weapontype notRanged)
    // Uther Damage reduction
    if(targ.getAbilityLevel(UTHER_ABIL_3) > 0)
        DamageEvent.setAmount(DamageEvent.getAmount() * (1-0.02*targ.getAbilityLevel(UTHER_ABIL_3)))
    // Vivpire Vampiric Aura
    if src.hasAbility(VIVPIRE_BUFF_4)
        let lvl = src.getAbilityLevel(VIVPIRE_BUFF_4)
        src.addHP(DamageEvent.getAmount() * healVivpireMultiplier[lvl-1])
    // Wolfman attack
    if src.hasAbility(WOLF_BUFF_1)
        src.addHP(DamageEvent.getAmount() * 0.25)
    // Reflection non-ranged
    if(notRanged == WEAPON_TYPE_WHOKNOWS)
        reflectionChecks(src,targ)


function reflectionChecks(unit src, unit targ)
    let dam = DamageEvent.getAmount()
    let targuID = targ.getTypeId()
    if(targ.hasItemById(ITEM_175))
        reactiveArmor1(targ, src, dam)
    if(targ.hasItemById(ITEM_251))
        reactiveArmor2(targ, src, dam)
    if(targ.hasItemById(ITEM_226))
        splitArmor(targ, src, dam)
    if(targ.hasItemById(ITEM_114))
        perfectAquamrina(targ, src, dam)
    if(targ.hasItemById(ITEM_303))
        spikedArmor(targ, src, dam)
    if(targuID == WAVE_MOB_18)
        turtle(targ, src, dam)
    if(targuID == WAVE_BOSS_95)
        dragonTurtle(targ, src, dam)
    if(targ.getAbilityLevel('A0RI') > 0)
        pitLordThorn(targ, src)
    if(targ.getAbilityLevel('a0RL') > 0)
        pitLordDemonSkin(targ, src, dam)
    if(targ.hasAbility('BEah'))
        thornsAuraWave(targ, src, dam)