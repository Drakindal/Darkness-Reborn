package BouncingProjectiles
import ClosureForGroups
import ClosureTimers

public interface OnProjectileHit
    function hit(effect detectionUnit, unit target)

public class BouncingProjectiles
    protected bool closestEnemy
    protected int buffBias
    protected real bounceRange
    protected int maxBounceCount
    protected unit newTarg
    protected unit caster
    protected int counter
    protected effect sfx
    protected unit target

    construct(effect sfx, unit caster, unit target, real bounceRange, bool closestEnemy, int maxBounceCount, int buffBias)
        this.target = target
        this.sfx = sfx
        this.caster = caster
        this.closestEnemy = closestEnemy
        this.bounceRange = bounceRange
        this.maxBounceCount = maxBounceCount
        this.counter = 0
        this.buffBias = buffBias

    construct(effect sfx, unit caster, unit target, real bounceRange, bool closestEnemy, int maxBounceCount)
        this.target = target
        this.sfx = sfx
        this.caster = caster
        this.closestEnemy = closestEnemy
        this.bounceRange = bounceRange
        this.maxBounceCount = maxBounceCount
        this.counter = 0
        this.buffBias = 0

    ondestroy
        sfx.destr()

    private function impact(effect detectionUnit, OnProjectileHit onHit)
        if(target.isAlive())
            onHit.hit(detectionUnit, target)
        counter++
        if(counter >= maxBounceCount)
            sfx.destr()
            destroy onHit
            destroy this
        else
            swapTarget(onHit)

    private function swapTargetClosest(vec2 sfxPos, unit u)
        if(u.isEnemyOf(caster.getOwner()))
            if(u != target)
                if(buffBias > 0)
                    if(newTarg.hasAbility(buffBias) == false or u.hasAbility(buffBias))
                        let udis = u.getPos().distanceTo(sfxPos)
                        let ndis = newTarg.getPos().distanceTo(sfxPos)
                        if(udis < ndis and u.isAlive())
                            newTarg = u
                else
                    let udis = u.getPos().distanceTo(sfxPos)
                    let ndis = newTarg.getPos().distanceTo(sfxPos)
                    if(udis < ndis and u.isAlive())
                        newTarg = u

    private function swapTargetFurthest(vec2 sfxPos, unit u)
        if(u.isEnemyOf(caster.getOwner()))
            if(u != target)
                let udis = u.getPos().distanceTo(sfxPos)
                let ndis = newTarg.getPos().distanceTo(sfxPos)
                if(udis > ndis and u.isAlive())
                    newTarg = u

    private function swapTarget(OnProjectileHit onHit)
        newTarg = null
        let sfxPos = sfx.getPos()
        if(closestEnemy)
            forUnitsInRange(sfxPos, bounceRange) (unit u) ->
                swapTargetClosest(sfxPos, u)
        else
            forUnitsInRange(sfxPos, bounceRange) (unit u) ->
                swapTargetFurthest(sfxPos, u)
        target = newTarg
        if(target == null)
            sfx.destr()
            destroy this
        else
            moveForward(onHit)

    function moveForward(OnProjectileHit onHit)
        doPeriodically(0.02) (CallbackPeriodic cb) ->
            let pos1 = sfx.getPos()
            let pos2 = target.getPos()
            let angle = pos1.angleTo(pos2)
            let pos3 = pos1.polarOffset(angle, 7.)
            sfx..setPos(pos3).setYaw(angle.radians())
            let dist = pos1.distanceTo(pos2)
            if(dist <= 11.)
                impact(sfx, onHit)
                destroy cb