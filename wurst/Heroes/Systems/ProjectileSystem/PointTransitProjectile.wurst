package PointTransitProjectile

import ClosureTimers

public interface OnProjectileHit
    function hit(vec2 target, bool inTransit)

public class PointTransitProjectile
    protected vec2 target
    protected effect sfx
    protected real tickCounter
    protected real tickRate

    construct(vec2 target, effect sfx, real tickRate)
        this.target = target
        this.sfx = sfx
        this.tickRate = tickRate     

    ondestroy
        sfx.destr()

    private function impact(OnProjectileHit onHit)
        onHit.hit(target, false)
        destroy this

    private function inTransit(OnProjectileHit onHit)
        onHit.hit(target, true)

    function moveForward(real velocity, OnProjectileHit onHit)
        let origPos = sfx.getPos()
        var pos1 = sfx.getPos()
        let angle = pos1.angleTo(target)
        doPeriodically(0.02) (CallbackPeriodic cb) ->
            pos1 = sfx.getPos()
            let pos3 = pos1.polarOffset(angle, 7. * velocity)
            sfx..setPos(pos3).setYaw(angle.radians())
            let dist = pos1.distanceTo(target)
            if(dist <= 11. or origPos.distanceTo(target) < origPos.distanceTo(pos1))
                impact(onHit)
                destroy onHit
                destroy cb
            else if tickCounter > tickRate
                tickCounter = tickCounter - tickRate
                inTransit(onHit)
            else
                tickCounter = tickCounter + 0.02

    function timedMoveForward(real range, real time, OnProjectileHit onHit)
        var pos1 = sfx.getPos()
        let angle = pos1.angleTo(target)
        let dist = (range * tickRate)/time
        doPeriodicallyTimed(tickRate, time) (CallbackCounted cb) ->
            pos1 = sfx.getPos()
            let distanceTravel = pos1.polarOffset(angle, dist)
            sfx..setPos(distanceTravel).setYaw(angle.radians())
            if(cb.isLast())
                impact(onHit)
                destroy onHit
                destroy cb
            else
                inTransit(onHit)