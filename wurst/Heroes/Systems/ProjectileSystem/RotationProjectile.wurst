package RotationProjectile

import ClosureTimers
import LinkedList
import HashMap
import ClosureForGroups

public interface OnRotationHit
    function hit(unit hitUnit)

public class RotationProjectile
    protected LinkedList<LinkedList<effect>> arms
    protected HashMap<effect,real> sfxRot

    construct()
        this.sfxRot = new HashMap<effect, real>
        this.arms = new LinkedList<LinkedList<effect>>
    
    ondestroy
        arms.forEach() (LinkedList<effect> t) ->
            t.forEach() (effect t) ->
                t.destr()
            destroy t
        destroy arms
        sfxRot.flush()
        destroy sfxRot

    function rotationCreation(unit center, string sfxPath, real rotationVelocity, int armAmount, int amountPerArm, real range, real sfxMinRotationVelocity, real sfxMaxRotationVelocity, real sfxSize, OnRotationHit onHit)
        let randomRotStart = GetRandomInt(0, 359)
        let pos = center.getPos()
        let angle = 360/armAmount
        let range2 = range/amountPerArm
        for int i = 1 to armAmount
            let armInnerList = new LinkedList<effect>
            let angle2 = angle * i + randomRotStart
            for int j = 1 to amountPerArm
                let pos1 = pos.polarOffset(angle2.asAngleDegrees(), range2*j)
                let tempSfx = addEffect(sfxPath, pos1)
                tempSfx.setScale(sfxSize)
                let rot = GetRandomReal(0, 359)
                armInnerList.add(tempSfx)
                tempSfx.setYaw(rot)
                sfxRot.put(tempSfx, rot)
            arms.add(armInnerList)
        moveRotation(center, rotationVelocity, sfxMinRotationVelocity, sfxMaxRotationVelocity, range2, onHit)
        
    private function moveRotation(unit center, real rotationVelocity, real sfxMinRotationVelocity, real sfxMaxRotationVelocity, real colliSize, OnRotationHit onHit)
        doPeriodically(0.02) (CallbackPeriodic cb) ->
            if center.isAlive() == false
                destroy onHit
                destroy cb
                destroy this
            else
                arms.forEach() (LinkedList<effect> t) ->
                    moveRotationPerArm(t, center, rotationVelocity, sfxMinRotationVelocity, sfxMaxRotationVelocity, colliSize, onHit)

    private function moveRotationPerArm(LinkedList<effect> arm, unit center, real rotationVelocity, real sfxMinRotationVelocity, real sfxMaxRotationVelocity, real colliSize, OnRotationHit onHit)
        let centerPos = center.getPos()
        arm.forEach() (effect t) ->
            let randRot = GetRandomReal(sfxMinRotationVelocity, sfxMaxRotationVelocity)
            let pos = t.getPos()
            let dist = centerPos.distanceTo(pos)
            let angle = centerPos.angleTo(pos) + rotationVelocity.asAngleDegrees()
            let pos2 = centerPos.polarOffset(angle, dist)
            sfxRot.put(t, sfxRot.get(t) + randRot)
            t.setPos(pos2)
            t.setYaw(sfxRot.get(t))
            forUnitsInRange(pos2, colliSize) (unit u) ->
                if u.isEnemyOf(center)
                    onHit.hit(u)