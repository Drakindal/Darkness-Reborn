package PointProjectile
import ClosureTimers

public interface OnProjectileHit
    function hit(effect detectionUnit, vec2 target)

public class PointProjectile
    protected vec2 target
    protected effect sfx
    protected OnProjectileHit onHit

    construct(vec2 target, effect sfx, OnProjectileHit onHit)
        this.target = target
        this.sfx = sfx
        this.onHit = onHit
        
    ondestroy
        sfx.destr()
        destroy onHit

    function impact()
        onHit.hit(sfx, target)
        destroy this

    function moveForward(real velocity)
        var pos1 = sfx.getPos()
        let angle = pos1.angleTo(target)
        doPeriodically(0.02) (CallbackPeriodic cb) ->
            pos1 = sfx.getPos()
            let pos3 = pos1.polarOffset(angle, 7. * velocity)
            sfx..setPos(pos3).setYaw(angle.radians())
            let dist = pos1.distanceTo(target)
            if(dist <= 11.)
                impact()
                destroy cb

    function timedMoveForward(int range, real time)
        var pos1 = sfx.getPos()
        let angle = pos1.angleTo(target)
        let dist = (range * 0.02)/time
        doPeriodicallyTimed(0.02, time) (CallbackCounted cb) ->
            pos1 = sfx.getPos()
            let distanceTravel = pos1.polarOffset(angle, dist)
            sfx..setPos(distanceTravel).setYaw(angle.radians())
            if(cb.isLast())
                impact()
                destroy cb

public function firePointProjectile(vec2 target, effect sfx, real velocity, OnProjectileHit onHit)
    let detection = new PointProjectile(target, sfx, onHit)
    detection.moveForward(velocity)

public function fireTimesPointProjectile(vec2 target, effect sfx, real time, int range, OnProjectileHit onHit)
    let detection = new PointProjectile(target, sfx, onHit)
    detection.timedMoveForward(range, time)