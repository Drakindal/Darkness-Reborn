package A006_Q
import MyUnitIds
import ClosureTimers
import MyAbilityIds
import ClosureEvents
import OrderIds
import Abilities
import codeDamageTypings
unit abilUnit
int dmg
unit caster = null

init
    imageArrow()

function arrowCreate(vec2 pos, unit caster, unit target)
    let arrowMissile = AddSpecialEffect(Abilities.moonPriestessMissile, pos.x, pos.y)
    var pos1 = pos
    var pos2 = target.getPos()
    var angle = pos.angleTo(pos2)
    arrowMissile.setYaw(angle.degrees())
    doPeriodically(0.05) (CallbackPeriodic cb) ->
        angle = arrowMissile.getPos().angleTo(target.getPos())
        arrowMissile.setYaw(angle.degrees())
        pos1 = arrowMissile.getPos()
        angle = pos1.angleTo(pos2)
        let pos3 = pos1.polarOffset(angle, 25.)
        let isAlive = target.isAlive()
        arrowMissile..setPos(pos3).setYaw(angle.radians())
        if(isAlive)
            pos2 = target.getPos()
        let dist = pos1.distanceTo(pos2)
        if(dist <= 25.)
            if(isAlive)
                let damage = caster.getAgi(true) * 0.6 * caster.getAbilityLevel(DARKRANGER_ABIL_1)
                magicalDamageCode(damage, caster, target)
            arrowMissile.destr()
            destroy cb

function imageArrow()
    EventListener.onTargetCast(DARKRANGER_ABIL_1) (unit caster, unit target) ->
        let lvl = caster.getAbilityLevel(DARKRANGER_ABIL_1)
        let angle = caster.getPos().angleTo(target.getPos())
        for int i = 1 to 3
            let polarProj = caster.getPos().polarOffset(angle.op_plus(225.0.asAngleRadians()), -200.*i)
            let archer = createUnit(caster.getOwner(), DUMMY_UNIT_1, polarProj, angle)
            archer..setTimedLife(1.0)
            ..issueImmediateOrderById(OrderIds.thunderbolt)
            ..setVertexColor(100, 100, 100, 60)
            ..addAbility(DARKRANGER_DUMMYABIL_1)
            ..setAbilityLevel(DARKRANGER_DUMMYABIL_1, lvl)
            arrowCreate(polarProj, caster, target)

        for int i = 1 to 3
            let polarProj = caster.getPos().polarOffset(angle.op_minus(225.0.asAngleRadians()), -200.*i)
            let archer = createUnit(caster.getOwner(), DUMMY_UNIT_1, polarProj, angle)
            archer..setTimedLife(1.0)
            ..issueImmediateOrderById(OrderIds.thunderbolt)
            ..setVertexColor(100, 100, 100, 60)
            ..addAbility(DARKRANGER_DUMMYABIL_1)
            ..setAbilityLevel(DARKRANGER_DUMMYABIL_1, lvl)
            arrowCreate(polarProj, caster, target)