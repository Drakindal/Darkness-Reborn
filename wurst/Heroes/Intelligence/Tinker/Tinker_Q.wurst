package Tinker_Q

import ClosureEvents
import MyAbilityIds
import ClosureTimers
import Abilities
import Artillery
import ClosureForGroups
import DummyCaster
import codeDamageTypings
import OrderIds
import SoundUtils

public function clusterRockets()
    let ROCKET_ARTILLERY = compiletime(ArtilleryDetection.createArtilleryDummy(0, 120, 160, 1, Abilities.rocketMissile, 500, 0.3))
    let ROCKET_LAUNCH_SOUND = new SoundDefinition(Sounds.tinkerMissileLaunch1, false, true)
    EventListener.onPointCast(TINKER_ABILITY_1) (unit caster, vec2 target) ->
        let lvl = caster.getAbilityLevel(TINKER_ABILITY_1)
        let missileCount = lvl * 2 + 8
        let angle = 6.283185 / missileCount
        let timerDuration = caster.getAbility(TINKER_ABILITY_1).getField(ABILITY_RLF_DURATION_NORMAL, lvl-1)
        let interval = timerDuration / missileCount
        let pos = caster.getPos()
        doPeriodicallyTimed(interval, timerDuration) (CallbackCounted cb) ->
            if(caster.getCurrentOrder() == OrderIds.clusterrockets)
                ROCKET_LAUNCH_SOUND.playOnPoint(caster.getPos3Real())
                let randx = GetRandomReal(0, 0.4)
                let randy = GetRandomReal(0, 0.4)
                let randx2 = GetRandomReal(-20, 20)
                let randy2 = GetRandomReal(-20, 20)
                let currentTarget = vec2(target.x + 125 * Cos(angle * cb.getCount() + randx) + randx2, target.y + 125 * Sin(angle * cb.getCount() + randy) + randy2)
                ArtilleryDetection.fireArtillery(caster, ROCKET_ARTILLERY, pos, currentTarget) (unit detectionUnit, unit caster, int data) -> 
                    let targetPos = detectionUnit.getPos()
                    let dmg = 0.25 * caster.getInt(true) + 20 * lvl
                    forUnitsInRange(targetPos, 100, true) (unit u) ->
                        if caster.isEnemyOf(u)
                            new DummyCaster()
                            ..owner(GetOwningPlayer(caster))
                            ..origin(vec2(caster.getX(), caster.getY()))
                            ..delay(1)
                            ..castTarget(ABILITY_DUMMY_16, 1, OrderIds.thunderbolt, u)
                            caster.damageTargetCode(dmg, u, null, -1, damageType.MAGICAL)
                if(cb.isLast())
                    caster.issueImmediateOrderById(OrderIds.stop)