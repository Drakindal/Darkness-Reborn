package Blacksmith

import MyItemIds
import ClosureTimers
import ClosureEvents
import MyUnitIds
import LinkedList

public let itemlist = blacksmithJackedUp()

CallbackSingle itemTimer

public function blacksmithJackedUp() returns LinkedList<LinkedList<int>>
    let blacksmithItems = new LinkedList<LinkedList<int>>
    let perrecipe = new LinkedList<int>

    perrecipe.add(ITEM_BASIC_GOLD_RING,ITEM_RING_OF_SUN,ITEM_HOVER_RING,ITEM_GOLDEN_RING)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_WOOD_BRACER,ITEM_GOLDEN_BRACER,ITEM_MAGIC_POTION,ITEM_MYSTERY_BRACER)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_KNIFE_OF_HUNTER,ITEM_STEEL_SWORD,ITEM_SWORD_FANG,ITEM_SWORD_OF_DRUIDMASTER, ITEM_GOD_SWORD)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_SPIRIT_SWORD_L2,ITEM_SPIRIT_BLADE,ITEM_SPIRIT_GIANT_BLADE,ITEM_APOCALYPSE, ITEM_GOLDEN_PHOENIX_SWORD)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_MIDNIGHT_MACE,ITEM_DOOMS_GRAND_STAFF,ITEM_VENGEANCE_WAR_STAFF,ITEM_FIERCE_GREATSTAFF,ITEM_MERCY)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_CAPE_OF_CURSED,ITEM_FUSION_HIDE_DRAPE,ITEM_BLOODIED_WOOL_CLOAK,ITEM_FROZEN_CLOTH_GREATCLOAK)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_OLD_RING,ITEM_RING_OF_MYSTERY,ITEM_GOLD_SIMPLE_RING,ITEM_RING_OF_FAKE_SUN,ITEM_RING_OF_LEGACY)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_SIMPLE_HAMMER,ITEM_WARRIOR_HAMMER,ITEM_FUSION_HAMMER,ITEM_THUNDERCHAOS_HAMMER,ITEM_GOLDEN_HAMMER)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_ARMOR_OF_HELL,ITEM_SILVER_GIANT_ARMOR,ITEM_DESTROYER_ARMOR,ITEM_INHERITED_ARMOR)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_BLOOD_ORB,ITEM_GOLD_CRYSTAL_ORB,ITEM_CHAOS_ORB,ITEM_GOLDEN_ORB,ITEM_MATRIX_ORB)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_LEATHER_BOOTS,ITEM_HEAVY_BOOTS,ITEM_BLOOD_INFUSED_LINEN_BOOTS,ITEM_FIRESOUL_WOOL_BOOTS)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_FREE_PLEDGE_RING,ITEM_AGED_IMAGE,ITEM_SUN_NECKLACE,ITEM_FAINT_TRINKET_NECKLACE,ITEM_SONG_BROOCH)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_VAMPIRELLA,ITEM_MYSTERY_PURPLE_STAFF,ITEM_PERFECT_SAPPHIRE,ITEM_MYSTERY_RED_STAFF)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_FORGE_STAFF_L4,ITEM_FREEZE_WAND,ITEM_FIERCE_GREATSTAFF,ITEM_FROZEN_STAFF)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_HYDRAS_TREASURE_BIG,ITEM_PERFECT_ARKENSTONE,ITEM_HYDRAS_TREASURE_PERFECT)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    perrecipe.add(ITEM_SPIDERS_TREASURE_BIG,ITEM_PERFECT_ARKENSTONE,ITEM_SPIDERS_TREASURE_PERFECT)
    blacksmithItems.add(new LinkedList<int>(perrecipe))
    perrecipe.clear()

    destroy perrecipe
    return blacksmithItems

function unit.checkInventoryForItems() returns int
    let slots = new LinkedList<int>
    var foundItem = false
    var atSpot = 0
    for int i = 0 to this.inventorySize() -1
        slots.add(this.itemInSlot(i).getTypeId())
    for int i = 0 to itemlist.size() - 2
        let itemCheck = itemlist.get(i)
        for int j = 0 to slots.size() - 1
            if itemCheck.has(slots.get(j))
                foundItem = true
                break
        if foundItem
            atSpot = i
            break
    destroy slots
    return atSpot

function checkItemListParity(LinkedList<item> itemListA, LinkedList<item> itemListB) returns bool
    for int i = 0 to itemListA.size()
        if itemListB.has(itemListA.get(i))
            return false
    return true


public function blacksmithDoAfter()
    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        let bs = GetTriggerUnit()
        if bs.getTypeId() == TINKERBUILDING_114
            if itemTimer == null
                
                let atSpot = bs.checkInventoryForItems()
                if atSpot > 0
                    bs.setAnimation("Work")
                    let itemInBs = new LinkedList<item>()
                    for int i = 0  to 5
                        itemInBs.add(bs.itemInSlot(i))
                    itemTimer = doAfter(20) ->
                        itemTimer = null
                        let currentItemInBs = new LinkedList<item>()
                        for int i = 0  to 5
                            currentItemInBs.add(bs.itemInSlot(i))
                        if checkItemListParity(itemInBs, currentItemInBs)
                            let rightList = itemlist.get(atSpot)
                            let newite = rightList.getLast()
                            for int i = 0 to rightList.size() - 2
                                bs.removeItemById(rightList.get(i))
                            let newitecur = bs.addItemById(newite)
                            newitecur.setPos(bs.getPos())
                            bs.setAnimation("Stand")
                            printTimed(COLOR_GOLD.toColorString()+"Blacksmith: Completed|r" + newitecur.getName(), 7)
                            destroy rightList
    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) -> 
        let bs = GetTriggerUnit()
        if bs.getTypeId() == TINKERBUILDING_114
            if bs.checkInventoryForItems() == 0
                bs.setAnimation("Stand")
                destroy itemTimer
                itemTimer = null