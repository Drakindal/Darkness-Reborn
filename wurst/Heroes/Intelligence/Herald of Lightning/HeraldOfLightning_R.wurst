package HeraldOfLightning_R

import DamageTarget
import DamageEvent
import MyAbilityIds
import MyBuffIds
import ClosureTimers

function staticChargeDamage()
    let src = DamageEvent.getSource()
    let lvl = src.getAbilityLevel(HERALD_ABILITY_R)
    let targ = DamageEvent.getTarget()
    let intellect = src.getInt(true)
    let dmg = intellect * (lvl * 2.00)
    src.damageTargetCode(dmg, targ, null, 'MRIP', damageType.Magical)
    let temp = addEffect("Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdl", targ.getPos())
    doAfter(0.4) -> 
        temp.destr()

function mindRipperHTIM(unit src)
    let lvl = src.getAbilityLevel(HERALD_ABILITY_R)
    DamageEvent.setAmount(DamageEvent.getAmount() * (1+0.2*lvl))
    src.addInt((0.01+0.25*(lvl-1)).ceil())

function mindRipperHEAB(unit src)
    let lvl = src.getAbilityLevel(HERALD_ABILITY_R)
    if lvl > 0
        if src.hasAbility(HERALD_BUFF_E)
            if GetRandomInt(1, 100) < 5*lvl + src.getAbilityLevel(HERALD_ABILITY_E)
                DamageEvent.setAmount(DamageEvent.getAmount() * (1+0.2*lvl))
                src.addInt((0.01+0.25*(lvl-1)).ceil())
        else
            if GetRandomInt(1, 100) < 5*lvl
                DamageEvent.setAmount(DamageEvent.getAmount() * (1+0.2*lvl))
                src.addInt((0.01+0.25*(lvl-1)).ceil())

public function mindRipper()
    DamageEvent.addListener(0) ->
        switch DamageEvent.getType()
            case ATTACK
                let src = DamageEvent.getSource()
                let lvl = src.getAbilityLevel(HERALD_ABILITY_R)
                if GetRandomInt(1, 100) < lvl * 5 and lvl > 0
                    staticChargeDamage()
            case CODE
                let id = DamageEvent.getId()
                switch id
                    case 'HTIM'
                        let src = DamageEvent.getSource()
                        mindRipperHTIM(src)
                    case 'HEAB'
                        let src = DamageEvent.getSource()
                        mindRipperHEAB(src)
                    default
            default