package PlayerCommands
import Votekick
import ClosureEvents
import Global_Variables
import MyUnitIds
import onStart
import DebugVar
camerafield cam

init
    changeCameraDistInit()
    startVoteKick()
    repickHero()

function changeCameraDistInit()
    EventListener.add(EVENT_PLAYER_CHAT_FILTER) -> 
        if EventData.getChatMessage().substring(0, 4).toLowerCase() == "-cam"
            let distance = EventData.getChatMessage().substring(5, EventData.getChatMessage().length()).toReal()
            if distance >= 4000 or distance <= 500
                printTimedToPlayer("Input has to be between 500 and 4000", 3, GetTriggerPlayer())
            else
                cam.setCameraField(GetTriggerPlayer(), distance, 1.5)

function repickHero()
    
    EventListener.add(EVENT_PLAYER_CHAT_FILTER) ->
        if not randomRepick and not DEBUG
            skip
        else if EventData.getChatMessage().substring(0, 7).toLowerCase() == "-repick"
            let trigP = EventData.getTriggerPlayer()
            let playHero = playerHero.get(trigP)

            // After picking hero food limit is set to 0, increase it in order to repick
            // Naga, thief and js also take food limit in Debug mode.
            if DEBUG
                trigP.setState(PLAYER_STATE_RESOURCE_FOOD_CAP, 200)

            if(playHero.getTypeId() == HERO_PICKER)
                skip
            else
                createWisp(trigP)
                playHero..setPlayersResearch(true).remove()
                gg_cam_CameraHeroPick.apply(true, trigP, 0.3)

function startVoteKick()
    EventListener.add(EVENT_PLAYER_CHAT_FILTER) -> 
        if EventData.getChatMessage().substring(0, 9).toLowerCase() == "-votekick"
            let commandPlayer = GetTriggerPlayer()
            let partialText = EventData.getChatMessage().substring(10, EventData.getChatMessage().length())
            let targplayer = getPlayerFromPartialNameColorOrId(partialText, commandPlayer)
            if(targplayer != null)
                if (targplayer.isIngame())
                    VoteKick.start(commandPlayer, targplayer)
                else
                    printTimedToPlayer("Player {0} is not a playing human player".format(targplayer.getName()), 15, commandPlayer)
            else
                printTimedToPlayer("Could not find player \"{0}\"".format(partialText), 15, commandPlayer)

public function getPlayerIdFromPartialNameColorOrId(string playerPartialNameColorOrId) returns int
    // Check for an ID match first since toInt() will return -1 when parsing an int fails
    let playerId = playerPartialNameColorOrId.toInt()
    if (playerId > 0 and playerId <= bj_MAX_PLAYER_SLOTS)
        return playerId - 1
    // Then player color
    let playerPartialNameColorOrIdLowerCase = playerPartialNameColorOrId.toLowerCase()
    for i = 0 to MAX_PLAYER_COLORS
        if (playerPartialNameColorOrIdLowerCase == PLAYER_COLOR_NAMES[i])
            return i
    // Then check for exact player name match
    for i = 0 to bj_MAX_PLAYER_SLOTS - 1
        if (players[i].getName() == playerPartialNameColorOrId)
            return i
    // Then, partial player name match
    for i = 0 to bj_MAX_PLAYER_SLOTS - 1
        if (players[i].getName().startsWith(playerPartialNameColorOrId))
            return i
    return -1

public function getPlayerFromPartialNameColorOrId(string playerPartialNameColorOrId, player ignore) returns player
    let id = getPlayerIdFromPartialNameColorOrId(playerPartialNameColorOrId)
    return (id >= 0 and id < bj_MAX_PLAYERS and id != ignore.getId()) ? players[id] : null