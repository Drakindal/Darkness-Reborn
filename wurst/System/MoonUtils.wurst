package MoonUtils

import ClosureForGroups
import ClosureTimers
import LinkedList
import Reference
import Time


public interface VoidFn
    function apply()

public interface Consumer<T>
    function apply(T t)

public function unit.forEachItemInInventory(Consumer<item> itemConsumer)
    for ii = 0 to 5
        let item_ = this.itemInSlot(ii)
        if not item_ == null
            itemConsumer.apply(item_)

public function unit.setTimeScaleAndPlayAnimationOverDuration(
    /* animationData */int idx,
    real animationDuration,
    real targetDuration
)
    this.setTimeScale(animationDuration / targetDuration)
    this.setAnimation(idx)

public function duration.op_mult(real ratio) returns duration
    return duration(this.seconds * ratio)

public function effect.belowGround() returns bool
    return this.getPos3().z < this.getPos().getTerrainZ()

public function LinkedList<string>.sample() returns string
    this.shuffle()
    return this.get(0)

public function trigger.registerEnterRect(rect rect_)
    this.registerEnterRegion(CreateRegion()..addRect(rect_), null)

public function string.colorWheel(color lhs, color rhs) returns string
    let len = this.length()
    var colored_chars = ""
    for i = 0 to len - 1
        let lerp = i.toReal() / len
        colored_chars += this.charAt(i).color(lhs.lerp(rhs, lerp))
    return colored_chars

public function rect.grownBy(real amt) returns rect
    return Rect(this.getMinX() - amt, this.getMinY() - amt, this.getMaxX() + amt, this.getMaxY() + amt)

public function findUnit(int typ) returns unit
    var ret = new Reference<unit>(null)
    forUnitsInRect(bj_mapInitialPlayableArea) (unit u) ->
        if u.getTypeId() == typ
            ret.val = u
    return ret.into()

public function findUnits(int typ) returns group
    let grp = CreateGroup()
    forUnitsInRect(bj_mapInitialPlayableArea) (unit u) ->
        if u.getTypeId() == typ
            grp.add(u)
    return grp

public function unit.replace(unit with) returns unit
    let pos3 = this.getPos3Real()
    let ang = this.getFacingAngle()
    this.remove()
    with.setPosReal(pos3)
    with.setFacing(ang)
    return with

public function LinkedList<string>.pagesOf(int pageSize) returns LinkedList<LinkedList<string>>
    let ret = new LinkedList<LinkedList<string>>()

    while not this.isEmpty()
        if ret.isEmpty() or ret.peek().size() >= pageSize
            ret.push(new LinkedList<string>())
        ret.peek().push(this.dequeue())

    return ret

public function LinkedList<string>.display() returns string
    return "[" + this.joinBy(", ") + "]"

public function LinkedList<LinkedList<string>>.display() returns string
    return this.map(l -> l.display()).display()


public interface CineSeq
    function apply() returns duration

public class Cinematic
    var running = false

    private function controller(LinkedList<CineSeq> sequence, CineSeq ending)
        if running and not sequence.isEmpty()
            let next = sequence.dequeue()
            let duration = next.apply()
            doAfter(duration.seconds) ->
                controller(sequence, ending)
        else
            endCinematic()
            ending.apply()

    construct(LinkedList<CineSeq> sequence, CineSeq ending)
        running = true
        controller(sequence, ending)
        ShowInterface(false, 0.)
        EnableUserControl(false)

    private function endCinematic()
        running = false
        ShowInterface(true, .5)
        EnableUserControl(true)
        fadeIn(0..seconds())

    static function fadeOutSeq(duration duration) returns CineSeq
        CineSeq seq = () ->
            fadeOut(duration)
            return duration
        return seq

    static function fadeInSeq(duration duration) returns CineSeq
        CineSeq seq = () ->
            fadeIn(duration)
            return duration
        return seq

    static function applyCameraSetupSeq(camerasetup setup) returns CineSeq
        CineSeq seq = () ->
            CameraSetupApply(setup, true, true)
            return 0..seconds()
        return seq

    static function snapCameraPosSeq(vec2 pos) returns CineSeq
        CineSeq seq = () ->
            setCameraPosition(pos)
            return 0..seconds()
        return seq

    static function doNothingSeq(duration duration) returns CineSeq
        CineSeq seq = () ->
            return duration
        return seq

    function skip_()
        running = false

    static function fadeOut(duration duration)
        EnableUserUI(false)
        SetCineFilterTexture("ReplaceableTextures\\CameraMasks\\White_mask.blp")
        SetCineFilterBlendMode(BLEND_MODE_BLEND)
        SetCineFilterTexMapFlags(TEXMAP_FLAG_NONE)
        SetCineFilterStartUV(0, 0, 1, 1)
        SetCineFilterEndUV(0, 0, 1, 1)
        SetCineFilterStartColor(0, 0, 0, 0)
        SetCineFilterEndColor(0, 0, 0, 255)
        SetCineFilterDuration(duration.seconds)
        DisplayCineFilter(true)

    static function fadeIn(duration duration)
        EnableUserUI(true)
        SetCineFilterTexture("ReplaceableTextures\\CameraMasks\\White_mask.blp")
        SetCineFilterBlendMode(BLEND_MODE_BLEND)
        SetCineFilterTexMapFlags(TEXMAP_FLAG_NONE)
        SetCineFilterStartUV(0, 0, 1, 1)
        SetCineFilterEndUV(0, 0, 1, 1)
        SetCineFilterStartColor(0, 0, 0, 255)
        SetCineFilterEndColor(0, 0, 0, 0)
        SetCineFilterDuration(duration.seconds)
        DisplayCineFilter(true)

constant error = CreateSoundFromLabel("InterfaceError", false, false, false, 10, 10)

public function simError(player forPlayer, string msg)
    let v = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n|cffffcc00" + msg + "|r"
    if GetLocalPlayer() == forPlayer
        ClearTextMessages()
        DisplayTimedTextToPlayer(forPlayer, 0.52, 0.96, 2.00, v)
        StartSound(error)

@Test function testPages()
    asList("a", "b", "c", "d", "e")
    .pagesOf(2)
    .display()
    .assertEquals(
        asList(
            asList("a", "b"),
            asList("c", "d"),
            asList("e")
        ).display()
    )
