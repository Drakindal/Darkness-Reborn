package Quests
import HashList
import ClosureEvents

public interface OnQuestComplete
    function questComplete(player questOwner)

interface OnQuestKillAnyComplete
    function questComplete(player questOwner, QuestIntKillAnyInstant questToRemove)

interface OnQuestKillTargetComplete
    function questComplete(player questOwner, QuestIntKillTargetInstant questToRemove)

interface OnQuestKillLevelRangeComplete
    function questComplete(player questOwner, QuestIntKillLevelRangeInstant questToRemove)

interface OnQuestKillLowestLevelComplete
    function questComplete(player questOwner, QuestIntKillLowestLevelInstant questToRemove)

public abstract class Quest
    protected bool done = false
    protected player questOwner
    protected string title
    protected framehandle questFrame
    protected string questText
    protected string rewardText = ""

    function getQuestOwner() returns player
        return questOwner

    function getQuestStatus() returns bool
        return done

    function getTitle() returns string
        return title

    abstract function getQuestText() returns string

    protected function toggleQuestStatus()
        done = not done

    function setQuestFrame(framehandle questFrame)
        this.questFrame = questFrame

    function updateQuestFrame(string textUpdate)
        questFrame.setText(textUpdate)

    construct(player questOwner, string title, string questText)
        this.questOwner = questOwner
        this.title = title
        this.questText = questText
        printTimedToPlayer(title + " has started!", 5, questOwner)
    
    construct(player questOwner, string title, string questText, string rewardText)
        this.questOwner = questOwner
        this.title = title
        this.questText = questText
        this.rewardText = rewardText
        printTimedToPlayer(title + " has started!", 5, questOwner)
        

class QuestIntInstant extends Quest
    int quest_resource = 0
    int quest_requirement

    construct(int quest_requirement, player questOwner, string title, string questText)
        super(questOwner,title, questText)
        this.quest_requirement = quest_requirement

    construct(int quest_requirement, player questOwner, string title, string questText, string rewardText)
        super(questOwner,title, questText, rewardText)
        this.quest_requirement = quest_requirement

    function addResource(int toAdd)
        quest_resource += toAdd
        if quest_resource >= quest_requirement
            toggleQuestStatus()

    function removeResource(int toSub)
        quest_resource -= toSub

    function getResource() returns int
        return quest_resource

    function getRequired() returns int
        return quest_requirement

    override function getQuestText() returns string
        if rewardText == ""
            return questText.format((quest_requirement-quest_resource).toString())
        else
            return questText.format((quest_requirement-quest_resource).toString()) + rewardText

public class QuestIntKillAnyInstant extends QuestIntInstant
    EventListener listener

    function onConstruct(OnQuestKillAnyComplete onComplete)
        listener = EventListener.add(EVENT_PLAYER_UNIT_DEATH) -> 
            let killer = EventData.getKillingUnit()
            if killer.getOwner() == questOwner
                if getQuestStatus()
                    skip
                else
                    addResource(1)
                    if getQuestStatus()
                        onComplete.questComplete(questOwner, this)
                        printTimedToPlayer(title + " is completed", 5, questOwner)
                        destroy onComplete
                        destroy listener
                        destroy this
                    else
                        let textToSet = getQuestText()
                        questFrame.setText(textToSet)
                        printTimedToPlayer(textToSet, 2, questOwner)

    construct(int quest_requirement, player questOwner, string title, string questText, OnQuestKillAnyComplete onComplete)
        super(quest_requirement, questOwner, title, questText)
        onConstruct(onComplete)
        
    construct(int quest_requirement, player questOwner, string title, string questText, string rewardText, OnQuestKillAnyComplete onComplete)
        super(quest_requirement, questOwner, title, questText, rewardText)
        onConstruct(onComplete)
    
    override function getQuestText() returns string
        return questText.format((quest_requirement-quest_resource).toString())

public class QuestIntKillTargetInstant extends QuestIntInstant
    EventListener listener
    string monsterNames

    function onConstruct(HashList<int> targetType,OnQuestKillTargetComplete onComplete)
        targetType.forEach() (integer t) ->
            let tempUnit = createUnit(t)
            monsterNames += tempUnit.getName() + "/"
            tempUnit.remove()
        monsterNames = monsterNames.substring(0, monsterNames.length()-1)
        listener = EventListener.add(EVENT_PLAYER_UNIT_DEATH) -> 
            if targetType.has(GetDyingUnit().getTypeId())
                let killer = GetKillingUnit()
                if killer.getOwner() == questOwner
                    if getQuestStatus()
                        skip
                    else
                        addResource(1)
                        if getQuestStatus()
                            onComplete.questComplete(questOwner, this)
                            printTimedToPlayer(title + " is completed", 5, questOwner)
                            destroy targetType
                            destroy listener
                            destroy onComplete
                            monsterNames = ""
                            destroy this
                        else
                            let textToSet = getQuestText()
                            questFrame.setText(textToSet)
                            printTimedToPlayer(textToSet, 2, questOwner)
                            
    construct(int quest_requirement, player questOwner, string title, HashList<int> targetType, string questText,  OnQuestKillTargetComplete onComplete)
        super(quest_requirement, questOwner, title, questText)
        onConstruct(targetType,onComplete)
    
    construct(int quest_requirement, player questOwner, string title, HashList<int> targetType, string questText, string rewardText, OnQuestKillTargetComplete onComplete)
        super(quest_requirement, questOwner, title, questText, rewardText)
        onConstruct(targetType,onComplete)
    
    override function getQuestText() returns string
        return questText.format((quest_requirement-quest_resource).toString(),monsterNames)

public class QuestIntKillLevelRangeInstant extends QuestIntInstant
    EventListener listener
    int lowestRange
    int highestRange

    construct(int quest_requirement, player questOwner, string title, int lowRange, int highRange, string questText,  OnQuestKillLevelRangeComplete onComplete)
        super(quest_requirement, questOwner, title, questText)
        lowestRange = lowRange
        highestRange = highRange
        listener = EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
            let dyingUnitLvl = EventData.getDyingUnit().getLevel()
            if dyingUnitLvl > lowRange and dyingUnitLvl < highRange
                let killer = EventData.getKillingUnit()
                if killer.getOwner() == questOwner
                    if getQuestStatus()
                        skip
                    else
                        addResource(1)
                        if getQuestStatus()
                            onComplete.questComplete(questOwner, this)
                            printTimedToPlayer(title + " is completed", 5, questOwner)
                            destroy onComplete
                            destroy listener
                            destroy this
                        else
                            let textToSet = getQuestText()
                            questFrame.setText(textToSet)
                            printTimedToPlayer(textToSet, 2, questOwner)

    override function getQuestText() returns string
        return questText.format((quest_requirement-quest_resource).toString(),lowestRange.toString(),highestRange.toString())

public class QuestIntKillLowestLevelInstant extends QuestIntInstant
    EventListener listener
    int lowestRange

    construct(int quest_requirement, player questOwner, string title, int lowestLevel, string questText,  OnQuestKillLowestLevelComplete onComplete)
        super(quest_requirement, questOwner, title, questText)
        lowestRange = lowestLevel
        listener = EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
            let dyingUnitLvl = GetDyingUnit().getLevel()
            if dyingUnitLvl > lowestLevel
                let killer = GetKillingUnit()
                if killer.getOwner() == questOwner
                    if getQuestStatus()
                        skip
                    else
                        addResource(1)
                        if getQuestStatus()
                            onComplete.questComplete(questOwner, this)
                            printTimedToPlayer(title + " is completed", 5, questOwner)
                            destroy onComplete
                            destroy listener
                            destroy this
                        else
                            let textToSet = getQuestText()
                            questFrame.setText(textToSet)
                            printTimedToPlayer(textToSet, 2, questOwner)

    override function getQuestText() returns string
        return questText.format((quest_requirement-quest_resource).toString(),lowestRange.toString())