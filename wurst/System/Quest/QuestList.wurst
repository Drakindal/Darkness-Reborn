package QuestList

import Quests
import ClosureEvents
import HashSet
import HashMap
import LinkedList

public class QuestList

    private let quests = new LinkedList<Quest>()
    player listOwner
    
    construct(player listOwner)
        this.listOwner = listOwner
 
    private function questListLimit() returns bool
        if (quests.size()) > 2
            return true
        else
            return false

    function questListEmpty() returns bool
        if (quests.size()) == 0
            return true
        else
            return false

    function questListFull() returns bool
        if questListLimit()
            printTimedToPlayer("Your quest list is full, you can't take any more right now.", 10, listOwner)
            return false
        else
            return true

    function getQuestList() returns LinkedList<Quest>
        return quests


    function printQuestList()
        quests.forEach() (Quest t) ->
            printTimedToPlayer(t.getQuestText(), 10, listOwner)

    function removeQuest(Quest newQuest)
        quests.remove(newQuest)

    function addQuest(Quest newQuest)
        quests.add(newQuest)

        
    function getQuestHashList() returns HashList<string>
        let questStrings = new HashList<string>()

        quests.forEach() (Quest t) ->
            questStrings.add(t.getQuestText())

        return questStrings

public let questListsOwners = new HashMap<player, QuestList>

init
    for int i = 0 to 9
        let p = players[i]
        if p.isIngame()
            questListsOwners.put(p, new QuestList(p))

    EventListener.add(EVENT_PLAYER_CHAT_FILTER) ->
        let compareString = EventData.getChatMessage().toLowerCase()
        if "-quests".contains(compareString)
            let p = EventData.getTriggerPlayer()
            if questListsOwners.has(p)
                let questList = questListsOwners.get(p)
                if(questList.questListEmpty())
                    printTimedToPlayer("Your questlog is empty currently.", 10, p)
                else
                    printTimedToPlayer("Below are your current Quests not yet done:", 10, p)
                    questList.printQuestList()
                     

public function startExclusiveKillingTargetQuest(int required, player questOwner, HashSet<int> targetUnitType, string title, OnQuestComplete questDone)
    let newQuest = new QuestIntKillTargetInstant(required, questOwner, title, targetUnitType, "Out of {1} there are |cff921313{0} |rleft to kill") (questOwner, questToRemove) ->
        questDone.questComplete(questOwner)
        questListsOwners.get(questOwner).removeQuest(questToRemove)
        destroy questDone
    questListsOwners.get(questOwner).addQuest(newQuest)

public function startKillingTargetQuest(int required, player questOwner, HashSet<int> targetUnitType, string title, OnQuestComplete questDone)
    let questList = questListsOwners.get(questOwner)
    if questList.questListFull()
        let newQuest = new QuestIntKillTargetInstant(required, questOwner, title, targetUnitType, "Out of {1} there are |cff921313{0} |rleft to kill") (questOwner, questToRemove) ->
            questDone.questComplete(questOwner)
            questListsOwners.get(questOwner).removeQuest(questToRemove)
            destroy questDone
        questList.addQuest(newQuest)

public function startExclusiveKillingAnyQuest(int required, player questOwner, string title, OnQuestComplete questDone)
    let newQuest = new QuestIntKillAnyInstant(required, questOwner, title, "|cff921313 {0} |rmonsters left ") (questOwner, questToRemove) ->
        questDone.questComplete(questOwner)
        questListsOwners.get(questOwner).removeQuest(questToRemove)
        destroy questDone
    questListsOwners.get(questOwner).addQuest(newQuest)

public function startKillingAnyQuest(int required, player questOwner, string title, OnQuestComplete questDone)
    let questList = questListsOwners.get(questOwner)
    if questList.questListFull()
        let newQuest = new QuestIntKillAnyInstant(required, questOwner, title, "|cff921313 {0} |rmonsters left ") (questOwner, questToRemove) ->
            questDone.questComplete(questOwner)
            questListsOwners.get(questOwner).removeQuest(questToRemove)
            destroy questDone
        questList.addQuest(newQuest)

public function startExclusiveKillingLevelRangeQuest(int required, player questOwner, int lower_Range, int higher_Range, string title, OnQuestComplete questDone)
    let newQuest = new QuestIntKillLevelRangeInstant(required, questOwner, title, lower_Range, higher_Range, "|cff921313 {0} |rmonsters between the levels {1} and {2} left to kill") (questOwner, questToRemove) ->
        questDone.questComplete(questOwner)
        questListsOwners.get(questOwner).removeQuest(questToRemove)
        destroy questDone
    questListsOwners.get(questOwner).addQuest(newQuest)


public function startKillingLevelRangeQuest(int required, player questOwner, int lower_Range, int higher_Range, string title, OnQuestComplete questDone)
    let questList = questListsOwners.get(questOwner)
    if questList.questListFull()
        let newQuest = new QuestIntKillLevelRangeInstant(required, questOwner, title, lower_Range, higher_Range, "|cff921313 {0} |rmonsters between the levels {1} and {2} left to kill") (questOwner, questToRemove) ->
            questDone.questComplete(questOwner)
            questListsOwners.get(questOwner).removeQuest(questToRemove)
            destroy questDone
        questList.addQuest(newQuest)

public function startExclusiveKillingLowestLevelQuest(int required, player questOwner, int lowestLevel, string title, OnQuestComplete questDone)
    let newQuest = new QuestIntKillLowestLevelInstant(required, questOwner, title, lowestLevel, "|cff921313 {0} |rmonsters with the lowest level of {1} left") (questOwner, questToRemove) ->
        questDone.questComplete(questOwner)
        questListsOwners.get(questOwner).removeQuest(questToRemove)
        destroy questDone
    questListsOwners.get(questOwner).addQuest(newQuest)

public function startKillingLowestLevelQuest(int required, player questOwner, int lowestLevel, string title, OnQuestComplete questDone)
    let questList = questListsOwners.get(questOwner)
    if questList.questListFull()
        let newQuest = new QuestIntKillLowestLevelInstant(required, questOwner, title, lowestLevel, "|cff921313 {0} |rmonsters with the lowest level of {1} left") (questOwner, questToRemove) ->
            questDone.questComplete(questOwner)
            questListsOwners.get(questOwner).removeQuest(questToRemove)
            destroy questDone
        questList.addQuest(newQuest)