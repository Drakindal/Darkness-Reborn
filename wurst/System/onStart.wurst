package onStart
import ClosureTimers
import WaveSetup
import DialogBox
import MyBuildingsIds
import RespawnCreeps
import MyUnitIds
import CodeDialog
import Global_Variables
import TeleportToMobs
import GameEnd
import heroLoader
import UpdateDropSite
import MultiboardTimer
import ClosureEvents
import LinkedList
import FountainQuest
import codeDamageTypings
import Debug
import Quest

real facing = 270
real facingUp = 90

public let taverns = new LinkedList<unit>()

init
    mapSetup()

    doAfter(0.01) -> 
        for i = 0 to 9
            gg_cam_CameraHeroPick.apply(true, players[i], 0.3)
            CreateFogModifierRectBJ( true, players[i], FOG_OF_WAR_VISIBLE, GetPlayableMapRect() )

public function questSetup()
    let commands = CreateQuest()
    let discord = CreateQuest()
    let recipe = CreateQuest()
    let credits = CreateQuest()
    
    QuestSetDiscovered(commands, true)
    QuestSetIconPath(commands, "ReplaceableTextures\\CommandButtons\\BTNSpy.blp")
    QuestSetTitle(commands, "Commands")
    QuestSetDescription(commands, "-cam 500-4000 : Adjusts the camera view \n-clean : Cleans items in 10 seconds\n-stopclean : Stops cleaning process\n-Quests : View your questlist"
    +"\n-votekick : Kicks the player, you can use number, full name, and partial name")

    QuestSetDiscovered(discord, true)
    QuestSetIconPath(discord, "ReplaceableTextures\\Icons\\discordIcon.blp")
    QuestSetTitle(discord, "Discord")
    QuestSetDescription(discord, "Discord invite: https://discord.gg/pnrhrHS")
    
    QuestSetDiscovered(recipe, true)
    QuestSetRequired(recipe, false)
    QuestSetIconPath(recipe, "ReplaceableTextures\\CommandButtons\\BTNAdvStruct.blp")
    QuestSetTitle(recipe, "Recipe for non-store items")
    QuestSetDescription(recipe, "Khadgar's Pendant of Health + Periapt of Vitality = Jewelry of Life\n"
    +"Pendant of Mana + Pendant of Energy = jewelry of Mana\n"
    +"Jewelry of Life + Periapt of Vitality + Ring of Regeneration = Guinevere's Ring\n"
    +"Jewelry of Mana + Pendant of Mana = Lancelot's Ring\n"
    +"Lancelot's Ring + Guinevere's Ring + Pendant of Energy = Arkenstone Fragment")

    credits..discovered(true)
    ..setDescription("Talavaj - Models\n If anyone is missing here, I just don't know who to credit")
    ..setTitle("Model Credits")
    ..setRequired(true)


public function createWisp(player p)
    playerHero.put(p, createUnit(p, HERO_PICKER, gg_rct_HeroPicker.getCenter()))

function onBuyHero(unit u)
    EventListener.add(u, EVENT_PLAYER_UNIT_SELL) ->
        let soldUnit = GetSoldUnit()
        let p = soldUnit.getOwner()
        let playHero = playerHero.get(p)
        if playHero.getTypeId() == HERO_PICKER
            playerHero.put(p, soldUnit)
            soldUnit.heroCheck()
            gg_cam_CameraHeroPicked.apply(true, p, 0.5)
            soldUnit.setPos(gg_rct_Base.getCenter())
            p.setState(PLAYER_STATE_RESOURCE_FOOD_CAP, 0)
            GetBuyingUnit().remove()
            unitStatMap.put(soldUnit.getTypeId(), new UnitStats())
        else
            soldUnit.remove()
            printTimedToPlayer("Your hero was killed by the newly recruited one as it left.", 10, p)
            playHero.kill()

function createSetup()
    let p = players[10]
    createMulti()

    SetPlayerState(players[11], PLAYER_STATE_GIVES_BOUNTY, 1)
    SetPlayerState(players[12], PLAYER_STATE_GIVES_BOUNTY, 1)
    SetPlayerState(players[13], PLAYER_STATE_GIVES_BOUNTY, 1)

    for i = 0 to 9
        createWisp(players[i])
        players[i]..addState(PLAYER_STATE_RESOURCE_FOOD_CAP, 5)..addState(PLAYER_STATE_RESOURCE_GOLD, 800)
        
    var posX = GetRectCenterX(gg_rct_HeroPicker) - 384.
    var posY = GetRectCenterY(gg_rct_HeroPicker) - 128

    let defenderTavern = CreateUnit(p, BUILDING_TAVERN_DEFENDER, posX, posY, bj_UNIT_FACING)
    taverns.add(defenderTavern)
    onBuyHero(defenderTavern)

    let supportTavern = CreateUnit(p, BUILDING_TAVERN_SUPPORT, posX, posY + 164, bj_UNIT_FACING)
    taverns.add(supportTavern)
    onBuyHero(supportTavern)

    let ascensionTavern = CreateUnit(p, BUILDING_TAVERN_ASCENSION, posX, posY + 328, bj_UNIT_FACING)
    taverns.add(ascensionTavern)
    onBuyHero(ascensionTavern)

    posX = GetRectCenterX(gg_rct_HeroPicker)
    let physicalTavern = CreateUnit(p, BUILDING_TAVERN_PHYSICAL_DPS, posX, posY, bj_UNIT_FACING)
    taverns.add(physicalTavern)
    onBuyHero(physicalTavern)

    let magicalTavern = CreateUnit(p, BUILDING_TAVERN_MAGICAL_DPS, posX, posY + 328, bj_UNIT_FACING)
    taverns.add(magicalTavern)
    onBuyHero(magicalTavern)

    posX = GetRectCenterX(gg_rct_HeroPicker) + 384.

    let builderTavern = CreateUnit(p, BUILDING_TAVERN_BUILDER, posX, posY, bj_UNIT_FACING)
    taverns.add(builderTavern)
    onBuyHero(builderTavern)

    let gatherTavern = CreateUnit(p, BUILDING_TAVERN_GATHERER, posX, posY + 328, bj_UNIT_FACING)
    taverns.add(gatherTavern)
    onBuyHero(gatherTavern)

    let crafterTavern = CreateUnit(p, BUILDING_TAVERN_CRAFTER, posX, posY + 164, bj_UNIT_FACING)
    taverns.add(crafterTavern)
    onBuyHero(crafterTavern)

    posX = GetRectCenterX(gg_rct_ShopLeft) + 150
    var posMax = GetRectMaxY(gg_rct_ShopLeft)
    var posMin = GetRectMinY(gg_rct_ShopLeft)
    var dividend = (posMax - posMin) / 4
    posY = posMin + 100

    CreateUnit(p, BUILDING_SHOP_BASIC_ITEMS4, posX, posY, 270.000) // Basic Items 4
    posY = posY + dividend
    CreateUnit(p, BUILDING_SHOP_BASIC_ITEMS3, posX, posY, 270.000) // Basic Items 3
    posY = posY + dividend
    CreateUnit(p, BUILDING_SHOP_BASIC_ITEMS2, posX, posY, 270.000) // Basic Items 2
    posY = posY + dividend
    CreateUnit(p, BUILDING_SHOP_BASIC_ITEMS1, posX, posY, 270.000) // Basic Items 1

    posX = GetRectCenterX(gg_rct_ShopRight) - 150
    posMax = GetRectMaxY(gg_rct_ShopRight)
    posMin = GetRectMinY(gg_rct_ShopRight)
    dividend = (posMax - posMin) / 4
    posY = posMin + 100

    let endGamebosses = CreateUnit(p, BUILDING_CREEPS_TP4, posX, posY, 270.000) // End-game bosses
    posY = posY + dividend
    let eliteGrounds = CreateUnit(p, BUILDING_CREEPS_TP3, posX, posY, 270.000) // Elite hunting grounds
    posY = posY + dividend
    let intermediateGrounds = CreateUnit(p, BUILDING_CREEPS_TP2, posX, posY, 270.000) // Intermediate hunting grounds
    posY = posY + dividend
    let easyGrounds = CreateUnit(p, BUILDING_CREEPS_TP1, posX, posY, 270.000) // Easy hunting grounds

    posX = GetRectCenterX(gg_rct_ShopLeft) - 150
    posMax = GetRectMaxY(gg_rct_ShopLeft)
    posMin = GetRectMinY(gg_rct_ShopLeft)
    dividend = (posMax - posMin) / 4
    posY = posMin + 100

    CreateUnit(p, BUILDING_SHOP_RECIPES4, posX, posY, 270.000) // Recipe shop 4
    posY = posY + dividend
    CreateUnit(p, BUILDING_SHOP_RECIPES3, posX, posY, 270.000) // Recipe Shop 3
    posY = posY + dividend
    CreateUnit(p, BUILDING_SHOP_RECIPES2, posX, posY, 270.000) // Recipe Shop 2
    posY = posY + dividend
    CreateUnit(p, BUILDING_SHOP_RECIPES1, posX, posY, 270.000) // Recipe Shop 1

    posX = GetRectCenterX(gg_rct_ShopRight) + 150
    posMax = GetRectMaxY(gg_rct_ShopRight)
    posMin = GetRectMinY(gg_rct_ShopRight)
    dividend = (posMax - posMin) / 4
    posY = posMin + 100

    CreateUnit(p, BUILDING_SHOP_LATE_GAME_ITEMS4, posX, posY, 270.000) // End Game Items
    posY = posY + dividend
    CreateUnit(p, BUILDING_SHOP_GEMS, posX, posY, 270.000) // Decent Items
    posY = posY + dividend
    CreateUnit(p, BUILDING_SHOP_LATE_GAME_ITEMS2, posX, posY, 270.000) // Late Game Items
    posY = posY + dividend
    CreateUnit(p, BUILDING_SHOP_LATE_GAME_ITEMS1, posX, posY, 270.000) // Late Game Items
 
    posX = GetRectCenterX(gg_rct_Base)
    posY = GetRectCenterY(gg_rct_Base) + 200

    CreateUnit(players[10], BUILDING_FOUNTAIN, posX, posY, 270.000).questItemPickup() // Fountain of Healing (at base)

    dropSite = CreateUnit(players[10], DROPSITE, posX, posY - 800, 270.)//Dropsite
    updateDropSite() 
    elementalSoul = createUnit(players[10], ELEMENTAL_SOUL, gg_rct_AllSpawnMove2.getCenter(), facing.asAngleDegrees()) // Elemental Soul    
        
    elementalSoul.onDefeat()

    teleportToMobs(easyGrounds, intermediateGrounds, eliteGrounds, endGamebosses)

    initDebug()

function dialogBoxClick()
    preWaveSetup()
    questSetup()
    createSetup()
    eliteSideCreepsSetup()
    bossCreepSetup()
    overdryaSetup()
    codeDialog()
    setRegions()

function automaticPick()
    gameMode = 1
    dialogBoxClick()
    print("Automatically chosen Easy mode")

function mapSetup()
    doAfter(0.5) -> 
        let dBox = new DialogBox("Choose difficulty")

        gameMode = -1

        dBox.addButton("Baby") -> 
            gameMode = 0
            dialogBoxClick()
            print("All enemies will have 0.5x the health and 0.5x the damage/armor. \nAbilities of Tower bosses have been disabled.")
            destroy dBox

        dBox.addButton("Easy") -> 
            gameMode = 1
            dialogBoxClick()
            print("All enemies will have 0.75x the health and 0.75x the damage/armor. \nAbilities of Tower bosses have been disabled.")
            destroy dBox

        dBox.addButton("Normal") ->
            gameMode = 2
            dialogBoxClick()
            print("All enemies will have 1x the health and 1x the damage/armor.")
            destroy dBox

        dBox.addButton("Hard") -> 
            gameMode = 3
            dialogBoxClick()
            print("All enemies will have 2x the health and 1.5x the damage/armor. \nHealth and Armor WIP on the first 4 spawn mobs.")
            destroy dBox
        
        dBox.addButton("Extreme") -> 
            gameMode = 4
            dialogBoxClick()
            print("All enemies will have 4x the health and 2x the damage/armor. \nHealth and Armor WIP on the first 4 spawn mobs.")
            destroy dBox
        
        dBox.display(players[0], true)

        doAfter(30) -> 
            if(gameMode == -1)
                automaticPick()
                dBox.display(players[0], false)
                print("All enemies will have 0.75x the health and 0.75x the damage/armor. \nAbilities of Tower bosses have been disabled.")
                destroy dBox